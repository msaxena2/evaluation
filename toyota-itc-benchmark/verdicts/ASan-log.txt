ASan being tested on 01.w_Defects 1 1

vflag_file = 1 vflag_func = 1 vflag_copy =1001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 2

vflag_file = 1 vflag_func = 2 vflag_copy =1002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 3

vflag_file = 1 vflag_func = 3 vflag_copy =1003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 4

vflag_file = 1 vflag_func = 4 vflag_copy =1004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 5

vflag_file = 1 vflag_func = 5 vflag_copy =1005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 6

vflag_file = 1 vflag_func = 6 vflag_copy =1006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 7

vflag_file = 1 vflag_func = 7 vflag_copy =1007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 8

vflag_file = 1 vflag_func = 8 vflag_copy =1008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 9

vflag_file = 1 vflag_func = 9 vflag_copy =1009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 10

vflag_file = 1 vflag_func = 10 vflag_copy =1010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 11

vflag_file = 1 vflag_func = 11 vflag_copy =1011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 12

vflag_file = 1 vflag_func = 12 vflag_copy =1012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 13

vflag_file = 1 vflag_func = 13 vflag_copy =1013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 14

vflag_file = 1 vflag_func = 14 vflag_copy =1014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 15

vflag_file = 1 vflag_func = 15 vflag_copy =1015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 16

vflag_file = 1 vflag_func = 16 vflag_copy =1016  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 1 17

vflag_file = 1 vflag_func = 17 vflag_copy =1017  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 1

vflag_file = 2 vflag_func = 1 vflag_copy =2001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 2

vflag_file = 2 vflag_func = 2 vflag_copy =2002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 3

vflag_file = 2 vflag_func = 3 vflag_copy =2003  
0Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 4

vflag_file = 2 vflag_func = 4 vflag_copy =2004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 5

vflag_file = 2 vflag_func = 5 vflag_copy =2005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 6

vflag_file = 2 vflag_func = 6 vflag_copy =2006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 7

vflag_file = 2 vflag_func = 7 vflag_copy =2007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 8

vflag_file = 2 vflag_func = 8 vflag_copy =2008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 9

================================================================= 
==14669==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60300000eff8 at pc 0x0000004d094a bp 0x7ffe33458e50 sp 0x7ffe33458e48 
WRITE of size 4 at 0x60300000eff8 thread T0 
    #0 0x4d0949 in dynamic_buffer_overrun_009 8 
    #1 0x4d10f8 in dynamic_buffer_overrun_main 3 
    #2 0x4ce97b in main 3 
    #3 0x7f8093afbec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
0x60300000eff8 is located 4 bytes to the right of 20-byte region [0x60300000efe0,0x60300000eff4) 
allocated by thread T0 here: 
    #0 0x4a6bb4 in calloc 3 
    #1 0x4d06fc in dynamic_buffer_overrun_009 8 
    #2 0x4d10f8 in dynamic_buffer_overrun_main 3 
 
SUMMARY: AddressSanitizer: heap-buffer-overflow 8 in dynamic_buffer_overrun_009 
Shadow bytes around the buggy address: 
  0x0c067fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9de0: fa fa fa fa fa fa fa fa fa fa 00 00 04 fa fa fa 
=>0x0c067fff9df0: 00 00 04 fa fa fa 00 00 04 fa fa fa 00 00 04[fa] 
  0x0c067fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==14669==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 2 10

vflag_file = 2 vflag_func = 10 vflag_copy =2010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 11

vflag_file = 2 vflag_func = 11 vflag_copy =2011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 12

vflag_file = 2 vflag_func = 12 vflag_copy =2012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 13

vflag_file = 2 vflag_func = 13 vflag_copy =2013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 14

vflag_file = 2 vflag_func = 14 vflag_copy =2014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 15

vflag_file = 2 vflag_func = 15 vflag_copy =2015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 16

vflag_file = 2 vflag_func = 16 vflag_copy =2016  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 17

vflag_file = 2 vflag_func = 17 vflag_copy =2017  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 18

vflag_file = 2 vflag_func = 18 vflag_copy =2018  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 19

vflag_file = 2 vflag_func = 19 vflag_copy =2019  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 20

vflag_file = 2 vflag_func = 20 vflag_copy =2020  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 21

vflag_file = 2 vflag_func = 21 vflag_copy =2021  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 22

vflag_file = 2 vflag_func = 22 vflag_copy =2022  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 23

vflag_file = 2 vflag_func = 23 vflag_copy =2023  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 24

vflag_file = 2 vflag_func = 24 vflag_copy =2024  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 25

vflag_file = 2 vflag_func = 25 vflag_copy =2025  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 26

vflag_file = 2 vflag_func = 26 vflag_copy =2026  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 27

vflag_file = 2 vflag_func = 27 vflag_copy =2027  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 28

vflag_file = 2 vflag_func = 28 vflag_copy =2028  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 29

vflag_file = 2 vflag_func = 29 vflag_copy =2029  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 30

vflag_file = 2 vflag_func = 30 vflag_copy =2030  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 31

vflag_file = 2 vflag_func = 31 vflag_copy =2031  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 2 32

vflag_file = 2 vflag_func = 32 vflag_copy =2032  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 1

vflag_file = 3 vflag_func = 1 vflag_copy =3001  
print bufferundrPrinted from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 2

vflag_file = 3 vflag_func = 2 vflag_copy =3002  
underrun2Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 3

vflag_file = 3 vflag_func = 3 vflag_copy =3003  
0Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 4

vflag_file = 3 vflag_func = 4 vflag_copy =3004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 5

vflag_file = 3 vflag_func = 5 vflag_copy =3005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 6

vflag_file = 3 vflag_func = 6 vflag_copy =3006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 7

vflag_file = 3 vflag_func = 7 vflag_copy =3007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 8

ASAN:SIGSEGV 
================================================================= 
==14731==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fb964a245ec bp 0x7ffc27c8c0b0 sp 0x7ffc27c8b858 T0) 
    #0 0x7fb964a245eb in memset 3 
    #1 0x48ff0f in __asan_memset 3 
    #2 0x4d5383 in dynamic_buffer_underrun_008 7 
    #3 0x4d5383 in dynamic_buffer_underrun_main 0 
    #4 0x4ce9c6 in main 3 
    #5 0x7fb9649b9ec4 in __libc_start_main 7 
    #6 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 3 in memset 
==14731==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 3 9

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 3 10

vflag_file = 3 vflag_func = 10 vflag_copy =3010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 11

vflag_file = 3 vflag_func = 11 vflag_copy =3011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 12

vflag_file = 3 vflag_func = 12 vflag_copy =3012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 13

vflag_file = 3 vflag_func = 13 vflag_copy =3013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 14

vflag_file = 3 vflag_func = 14 vflag_copy =3014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 15

vflag_file = 3 vflag_func = 15 vflag_copy =3015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 16

vflag_file = 3 vflag_func = 16 vflag_copy =3016  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 17

vflag_file = 3 vflag_func = 17 vflag_copy =3017  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 18

vflag_file = 3 vflag_func = 18 vflag_copy =3018  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 19

vflag_file = 3 vflag_func = 19 vflag_copy =3019  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 20

vflag_file = 3 vflag_func = 20 vflag_copy =3020  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 21

vflag_file = 3 vflag_func = 21 vflag_copy =3021  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 22

vflag_file = 3 vflag_func = 22 vflag_copy =3022  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 23

vflag_file = 3 vflag_func = 23 vflag_copy =3023  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 24

vflag_file = 3 vflag_func = 24 vflag_copy =3024  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 25

vflag_file = 3 vflag_func = 25 vflag_copy =3025  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 26

vflag_file = 3 vflag_func = 26 vflag_copy =3026  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 27

vflag_file = 3 vflag_func = 27 vflag_copy =3027  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 28

vflag_file = 3 vflag_func = 28 vflag_copy =3028  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 29

vflag_file = 3 vflag_func = 29 vflag_copy =3029  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 30

vflag_file = 3 vflag_func = 30 vflag_copy =3030  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 31

vflag_file = 3 vflag_func = 31 vflag_copy =3031  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 32

vflag_file = 3 vflag_func = 32 vflag_copy =3032  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 33

vflag_file = 3 vflag_func = 33 vflag_copy =3033  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 34

vflag_file = 3 vflag_func = 34 vflag_copy =3034  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 35

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 3 36

vflag_file = 3 vflag_func = 36 vflag_copy =3036  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 3 37

================================================================= 
==14789==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60700000df60 at pc 0x0000004d5c41 bp 0x7ffc7fc490f0 sp 0x7ffc7fc490e8 
WRITE of size 8 at 0x60700000df60 thread T0 
    #0 0x4d5c40 in dynamic_buffer_underrun_037 2 
    #1 0x4d5c40 in dynamic_buffer_underrun_main 5 
    #2 0x4ce9c6 in main 3 
    #3 0x7f63ebec9ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
AddressSanitizer can not describe address in more detail (wild memory access suspected). 
SUMMARY: AddressSanitizer: heap-buffer-overflow 2 in dynamic_buffer_underrun_037 
Shadow bytes around the buggy address: 
  0x0c0e7fff9b90: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9ba0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9bb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9bc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9bd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
=>0x0c0e7fff9be0: fa fa fa fa fa fa fa fa fa fa fa fa[fa]fa fa fa 
  0x0c0e7fff9bf0: fa fa fa fa fa fa 00 00 00 00 00 00 00 00 00 00 
  0x0c0e7fff9c00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9c10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9c20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9c30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==14789==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 3 38

vflag_file = 3 vflag_func = 38 vflag_copy =3038  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 4 1

vflag_file = 4 vflag_func = 1 vflag_copy =4001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 4 2

vflag_file = 4 vflag_func = 2 vflag_copy =4002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 5 1

vflag_file = 5 vflag_func = 1 vflag_copy =5001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 5 2

vflag_file = 5 vflag_func = 2 vflag_copy =5002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 5 3

vflag_file = 5 vflag_func = 3 vflag_copy =5003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 5 4

vflag_file = 5 vflag_func = 4 vflag_copy =5004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 5 5

vflag_file = 5 vflag_func = 5 vflag_copy =5005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 5 6

vflag_file = 5 vflag_func = 6 vflag_copy =5006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 5 7

vflag_file = 5 vflag_func = 7 vflag_copy =5007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 5 8

vflag_file = 5 vflag_func = 8 vflag_copy =5008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 5 9

vflag_file = 5 vflag_func = 9 vflag_copy =5009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 5 10

vflag_file = 5 vflag_func = 10 vflag_copy =5010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 1

vflag_file = 6 vflag_func = 1 vflag_copy =6001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 2

vflag_file = 6 vflag_func = 2 vflag_copy =6002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 3

vflag_file = 6 vflag_func = 3 vflag_copy =6003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 4

vflag_file = 6 vflag_func = 4 vflag_copy =6004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 5

vflag_file = 6 vflag_func = 5 vflag_copy =6005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 6

vflag_file = 6 vflag_func = 6 vflag_copy =6006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 7

vflag_file = 6 vflag_func = 7 vflag_copy =6007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 8

vflag_file = 6 vflag_func = 8 vflag_copy =6008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 9

vflag_file = 6 vflag_func = 9 vflag_copy =6009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 10

vflag_file = 6 vflag_func = 10 vflag_copy =6010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 11

vflag_file = 6 vflag_func = 11 vflag_copy =6011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 12

vflag_file = 6 vflag_func = 12 vflag_copy =6012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 13

vflag_file = 6 vflag_func = 13 vflag_copy =6013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 14

vflag_file = 6 vflag_func = 14 vflag_copy =6014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 15

vflag_file = 6 vflag_func = 15 vflag_copy =6015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 16

vflag_file = 6 vflag_func = 16 vflag_copy =6016  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 17

vflag_file = 6 vflag_func = 17 vflag_copy =6017  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 18

vflag_file = 6 vflag_func = 18 vflag_copy =6018  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 6 19

vflag_file = 6 vflag_func = 19 vflag_copy =6019  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 1

vflag_file = 7 vflag_func = 1 vflag_copy =7001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 2

vflag_file = 7 vflag_func = 2 vflag_copy =7002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 3

vflag_file = 7 vflag_func = 3 vflag_copy =7003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 4

vflag_file = 7 vflag_func = 4 vflag_copy =7004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 5

vflag_file = 7 vflag_func = 5 vflag_copy =7005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 6

vflag_file = 7 vflag_func = 6 vflag_copy =7006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 7

vflag_file = 7 vflag_func = 7 vflag_copy =7007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 8

vflag_file = 7 vflag_func = 8 vflag_copy =7008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 9

vflag_file = 7 vflag_func = 9 vflag_copy =7009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 10

vflag_file = 7 vflag_func = 10 vflag_copy =7010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 11

vflag_file = 7 vflag_func = 11 vflag_copy =7011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 12

vflag_file = 7 vflag_func = 12 vflag_copy =7012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 13

vflag_file = 7 vflag_func = 13 vflag_copy =7013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 14

vflag_file = 7 vflag_func = 14 vflag_copy =7014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 15

vflag_file = 7 vflag_func = 15 vflag_copy =7015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 16

vflag_file = 7 vflag_func = 16 vflag_copy =7016  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 17

vflag_file = 7 vflag_func = 17 vflag_copy =7017  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 18

vflag_file = 7 vflag_func = 18 vflag_copy =7018  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 19

vflag_file = 7 vflag_func = 19 vflag_copy =7019  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 20

vflag_file = 7 vflag_func = 20 vflag_copy =7020  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 21

vflag_file = 7 vflag_func = 21 vflag_copy =7021  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 22

vflag_file = 7 vflag_func = 22 vflag_copy =7022  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 23

vflag_file = 7 vflag_func = 23 vflag_copy =7023  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 24

vflag_file = 7 vflag_func = 24 vflag_copy =7024  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 7 25

vflag_file = 7 vflag_func = 25 vflag_copy =7025  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 1

vflag_file = 8 vflag_func = 1 vflag_copy =8001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 2

vflag_file = 8 vflag_func = 2 vflag_copy =8002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 3

vflag_file = 8 vflag_func = 3 vflag_copy =8003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 4

vflag_file = 8 vflag_func = 4 vflag_copy =8004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 5

vflag_file = 8 vflag_func = 5 vflag_copy =8005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 6

vflag_file = 8 vflag_func = 6 vflag_copy =8006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 7

vflag_file = 8 vflag_func = 7 vflag_copy =8007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 8

vflag_file = 8 vflag_func = 8 vflag_copy =8008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 9

vflag_file = 8 vflag_func = 9 vflag_copy =8009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 10

vflag_file = 8 vflag_func = 10 vflag_copy =8010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 11

vflag_file = 8 vflag_func = 11 vflag_copy =8011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 8 12

vflag_file = 8 vflag_func = 12 vflag_copy =8012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 1

vflag_file = 9 vflag_func = 1 vflag_copy =9001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 2

vflag_file = 9 vflag_func = 2 vflag_copy =9002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 3

vflag_file = 9 vflag_func = 3 vflag_copy =9003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 4

vflag_file = 9 vflag_func = 4 vflag_copy =9004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 5

vflag_file = 9 vflag_func = 5 vflag_copy =9005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 6

vflag_file = 9 vflag_func = 6 vflag_copy =9006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 7

vflag_file = 9 vflag_func = 7 vflag_copy =9007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 8

vflag_file = 9 vflag_func = 8 vflag_copy =9008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 9

vflag_file = 9 vflag_func = 9 vflag_copy =9009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 10

vflag_file = 9 vflag_func = 10 vflag_copy =9010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 11

vflag_file = 9 vflag_func = 11 vflag_copy =9011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 12

vflag_file = 9 vflag_func = 12 vflag_copy =9012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 9 13

vflag_file = 9 vflag_func = 13 vflag_copy =9013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 10 1

vflag_file = 10 vflag_func = 1 vflag_copy =10001  
Task1! dead_lock= 20  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 10 2

vflag_file = 10 vflag_func = 2 vflag_copy =10002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 10 3

vflag_file = 10 vflag_func = 3 vflag_copy =10003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 10 4

vflag_file = 10 vflag_func = 4 vflag_copy =10004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 10 5

vflag_file = 10 vflag_func = 5 vflag_copy =10005  
dead lockPrinted from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 11 1

vflag_file = 11 vflag_func = 1 vflag_copy =11001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 11 2

vflag_file = 11 vflag_func = 2 vflag_copy =11002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 11 3

vflag_file = 11 vflag_func = 3 vflag_copy =11003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 12 1

vflag_file = 12 vflag_func = 1 vflag_copy =12001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 12 2

vflag_file = 12 vflag_func = 2 vflag_copy =12002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 12 3

vflag_file = 12 vflag_func = 3 vflag_copy =12003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 12 4

vflag_file = 12 vflag_func = 4 vflag_copy =12004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 12 5

vflag_file = 12 vflag_func = 5 vflag_copy =12005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 12 6

vflag_file = 12 vflag_func = 6 vflag_copy =12006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 12 7

vflag_file = 12 vflag_func = 7 vflag_copy =12007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 12 8

================================================================= 
==14996==ERROR: AddressSanitizer: attempting double-free on 0x60200000eff0 in thread T0: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x4ee3b1 in double_free_008 2 
    #2 0x4ee3b1 in double_free_main 0 
    #3 0x4cec69 in main 3 
    #4 0x7fb40616eec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
0x60200000eff0 is located 0 bytes inside of 1-byte region [0x60200000eff0,0x60200000eff1) 
freed by thread T0 here: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x4ee394 in double_free_function_008 2 
    #2 0x4ee394 in double_free_008 8 
    #3 0x4ee394 in double_free_main 0 
 
previously allocated by thread T0 here: 
    #0 0x4a6a2b in malloc 3 
    #1 0x4ee36a in double_free_008 4 
    #2 0x4ee36a in double_free_main 0 
 
SUMMARY: AddressSanitizer: double-free 3 in __interceptor_free 
==14996==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 12 9

vflag_file = 12 vflag_func = 9 vflag_copy =12009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 12 10

vflag_file = 12 vflag_func = 10 vflag_copy =12010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 12 11

vflag_file = 12 vflag_func = 11 vflag_copy =12011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 12 12

vflag_file = 12 vflag_func = 12 vflag_copy =12012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 13 1

 

Confirmed Negative 

ASan being tested on 01.w_Defects 13 2

 

Confirmed Negative 

ASan being tested on 01.w_Defects 13 3

 

Confirmed Negative 

ASan being tested on 01.w_Defects 13 4

vflag_file = 13 vflag_func = 4 vflag_copy =13004  
Task3! It's me, thread #100! 
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 14 1

vflag_file = 14 vflag_func = 1 vflag_copy =14001  
Double releasePrinted from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 14 2

vflag_file = 14 vflag_func = 2 vflag_copy =14002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 14 3

vflag_file = 14 vflag_func = 3 vflag_copy =14003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 14 4

vflag_file = 14 vflag_func = 4 vflag_copy =14004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 14 5

vflag_file = 14 vflag_func = 5 vflag_copy =14005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 14 6

vflag_file = 14 vflag_func = 6 vflag_copy =14006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 15 1

 

Confirmed Negative 

ASan being tested on 01.w_Defects 15 2

 

Confirmed Negative 

ASan being tested on 01.w_Defects 15 3

 

Confirmed Negative 

ASan being tested on 01.w_Defects 15 4

 

Confirmed Negative 

ASan being tested on 01.w_Defects 15 5

 

Confirmed Negative 

ASan being tested on 01.w_Defects 15 6

vflag_file = 15 vflag_func = 6 vflag_copy =15006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 15 7

 

Confirmed Negative 

ASan being tested on 01.w_Defects 15 8

 

Confirmed Negative 

ASan being tested on 01.w_Defects 15 9

 

Confirmed Negative 

ASan being tested on 01.w_Defects 16 1

ASAN:SIGSEGV 
================================================================= 
==15045==ERROR: AddressSanitizer: SEGV on unknown address 0x000000526670 (pc 0x00000041837f bp 0x000000526670 sp 0x7ffc203b1990 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x4f50a4 in free_nondynamic_allocated_memory_001 2 
    #6 0x4f50a4 in free_nondynamic_allocated_memory_main 1 
    #7 0x4ced95 in main 3 
    #8 0x7fe7a090eec4 in __libc_start_main 7 
    #9 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==15045==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 16 2

ASAN:SIGSEGV 
================================================================= 
==15047==ERROR: AddressSanitizer: SEGV on unknown address 0x000000526670 (pc 0x00000041837f bp 0x000000526670 sp 0x7fffadaf9db0 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x4f50f4 in free_nondynamic_allocated_memory_002 2 
    #6 0x4f50f4 in free_nondynamic_allocated_memory_main 6 
    #7 0x4ced95 in main 3 
    #8 0x7ff98e109ec4 in __libc_start_main 7 
    #9 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==15047==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 16 3

ASAN:SIGSEGV 
================================================================= 
==15049==ERROR: AddressSanitizer: SEGV on unknown address 0x0000005266b0 (pc 0x00000041837f bp 0x0000005266b0 sp 0x7fff62e994b0 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x4f5165 in free_nondynamic_allocated_memory_003 2 
    #6 0x4f5165 in free_nondynamic_allocated_memory_main 1 
    #7 0x4ced95 in main 3 
    #8 0x7f221bf5fec4 in __libc_start_main 7 
    #9 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==15049==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 16 4

vflag_file = 16 vflag_func = 4 vflag_copy =16004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 16 5

vflag_file = 16 vflag_func = 5 vflag_copy =16005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 16 6

vflag_file = 16 vflag_func = 6 vflag_copy =16006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 16 7

ASAN:SIGSEGV 
================================================================= 
==15057==ERROR: AddressSanitizer: SEGV on unknown address 0x000000526670 (pc 0x00000041837f bp 0x000000526670 sp 0x7ffe14d4b540 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x4f4c89 in free_nondynamic_allocated_memory_007 2 
    #6 0x4f5a5e in free_nondynamic_allocated_memory_main 3 
    #7 0x4ced95 in main 3 
    #8 0x7f1c713deec4 in __libc_start_main 7 
    #9 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==15057==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 16 8

ASAN:SIGSEGV 
================================================================= 
==15059==ERROR: AddressSanitizer: SEGV on unknown address 0x000000526670 (pc 0x00000041837f bp 0x000000526670 sp 0x7ffd1202ebc0 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x4f4ca9 in free_nondynamic_allocated_memory_008 2 
    #6 0x4f5a68 in free_nondynamic_allocated_memory_main 3 
    #7 0x4ced95 in main 3 
    #8 0x7f624de2bec4 in __libc_start_main 7 
    #9 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==15059==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 16 9

ASAN:SIGSEGV 
================================================================= 
==15061==ERROR: AddressSanitizer: SEGV on unknown address 0x0000005266f0 (pc 0x00000041837f bp 0x0000005266f0 sp 0x7ffe1bb74a60 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x4f4cc9 in free_nondynamic_allocated_memory_009 2 
    #6 0x4f5a72 in free_nondynamic_allocated_memory_main 3 
    #7 0x4ced95 in main 3 
    #8 0x7f766bb51ec4 in __libc_start_main 7 
    #9 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==15061==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 16 10

ASAN:SIGSEGV 
================================================================= 
==15063==ERROR: AddressSanitizer: SEGV on unknown address 0x000000526730 (pc 0x00000041837f bp 0x000000526730 sp 0x7ffce8b237b0 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x4f535c in free_nondynamic_allocated_memory_010 3 
    #6 0x4f535c in free_nondynamic_allocated_memory_main 6 
    #7 0x4ced95 in main 3 
    #8 0x7fa722089ec4 in __libc_start_main 7 
    #9 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==15063==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 16 11

ASAN:SIGSEGV 
================================================================= 
==15065==ERROR: AddressSanitizer: SEGV on unknown address 0x000000526770 (pc 0x00000041837f bp 0x000000526770 sp 0x7ffed4ff6fd0 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x4f53d4 in free_nondynamic_allocated_memory_011 3 
    #6 0x4f53d4 in free_nondynamic_allocated_memory_main 1 
    #7 0x4ced95 in main 3 
    #8 0x7fbc71b3bec4 in __libc_start_main 7 
    #9 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==15065==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 16 12

ASAN:SIGSEGV 
================================================================= 
==15067==ERROR: AddressSanitizer: SEGV on unknown address 0x000000526670 (pc 0x00000041837f bp 0x000000526670 sp 0x7fff5a83d490 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x4f544c in free_nondynamic_allocated_memory_012 3 
    #6 0x4f544c in free_nondynamic_allocated_memory_main 6 
    #7 0x4ced95 in main 3 
    #8 0x7fc6cf55eec4 in __libc_start_main 7 
    #9 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==15067==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 16 13

vflag_file = 16 vflag_func = 13 vflag_copy =16013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 16 14

================================================================= 
==15071==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x7ffed6ddc800 in thread T0 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x4f54f7 in free_nondynamic_allocated_memory_014 2 
    #2 0x4f54f7 in free_nondynamic_allocated_memory_main 6 
    #3 0x4ced95 in main 3 
    #4 0x7f148b332ec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
AddressSanitizer can not describe address in more detail (wild memory access suspected). 
SUMMARY: AddressSanitizer: bad-free 3 in __interceptor_free 
==15071==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 16 15

ASAN:SIGSEGV 
================================================================= 
==15073==ERROR: AddressSanitizer: SEGV on unknown address 0x0000005266b0 (pc 0x00000041837f bp 0x0000005266b0 sp 0x7ffea7a6b910 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x4f5568 in free_nondynamic_allocated_memory_015_func_001 2 
    #6 0x4f5568 in free_nondynamic_allocated_memory_015 5 
    #7 0x4f5568 in free_nondynamic_allocated_memory_main 1 
    #8 0x4ced95 in main 3 
    #9 0x7f0c1522cec4 in __libc_start_main 7 
    #10 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==15073==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 16 16

ASAN:SIGSEGV 
================================================================= 
==15075==ERROR: AddressSanitizer: SEGV on unknown address 0x0000005266b0 (pc 0x00000041837f bp 0x0000005266b0 sp 0x7ffd309e9150 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x4f55f7 in free_nondynamic_allocated_memory_016_func_002 5 
    #6 0x4f55f7 in free_nondynamic_allocated_memory_016 9 
    #7 0x4f55f7 in free_nondynamic_allocated_memory_main 6 
    #8 0x4ced95 in main 3 
    #9 0x7fd70413aec4 in __libc_start_main 7 
    #10 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==15075==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 17 1

vflag_file = 17 vflag_func = 1 vflag_copy =17001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 17 2

vflag_file = 17 vflag_func = 2 vflag_copy =17002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 17 3

vflag_file = 17 vflag_func = 3 vflag_copy =17003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 17 4

vflag_file = 17 vflag_func = 4 vflag_copy =17004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 17 5

ASAN:SIGSEGV 
================================================================= 
==15085==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f5256701496 bp 0x7ffdf60cec90 sp 0x7ffdf60ce428 T0) 
    #0 0x7f5256701495  2 
    #1 0x48fa7d in __asan_memcpy 3 
    #2 0x4f9373 in free_null_pointer_005 2 
    #3 0x4f9373 in free_null_pointer_main 7 
    #4 0x4cede0 in main 3 
    #5 0x7f52565d0ec4 in __libc_start_main 7 
    #6 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 2  
==15085==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 17 6

ASAN:SIGSEGV 
================================================================= 
==15087==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f15d9d1a496 bp 0x7ffe2e838850 sp 0x7ffe2e837fe8 T0) 
    #0 0x7f15d9d1a495  2 
    #1 0x48fa7d in __asan_memcpy 3 
    #2 0x4f93eb in free_null_pointer_006 6 
    #3 0x4f93eb in free_null_pointer_main 2 
    #4 0x4cede0 in main 3 
    #5 0x7f15d9be9ec4 in __libc_start_main 7 
    #6 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 2  
==15087==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 17 8

ASAN:SIGSEGV 
================================================================= 
==15089==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f99450c1496 bp 0x7ffebfd38110 sp 0x7ffebfd378a8 T0) 
    #0 0x7f99450c1495  2 
    #1 0x48fa7d in __asan_memcpy 3 
    #2 0x4f94a9 in free_null_pointer_008 2 
    #3 0x4f94a9 in free_null_pointer_main 2 
    #4 0x4cede0 in main 3 
    #5 0x7f9944f90ec4 in __libc_start_main 7 
    #6 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 2  
==15089==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 17 11

vflag_file = 17 vflag_func = 11 vflag_copy =17011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 1

vflag_file = 18 vflag_func = 1 vflag_copy =18001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 2

vflag_file = 18 vflag_func = 2 vflag_copy =18002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 3

vflag_file = 18 vflag_func = 3 vflag_copy =18003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 4

vflag_file = 18 vflag_func = 4 vflag_copy =18004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 5

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 18 6

vflag_file = 18 vflag_func = 6 vflag_copy =18006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 7

vflag_file = 18 vflag_func = 7 vflag_copy =18007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 8

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 18 9

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 18 10

vflag_file = 18 vflag_func = 10 vflag_copy =18010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 11

vflag_file = 18 vflag_func = 11 vflag_copy =18011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 12

vflag_file = 18 vflag_func = 12 vflag_copy =18012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 13

vflag_file = 18 vflag_func = 13 vflag_copy =18013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 14

vflag_file = 18 vflag_func = 14 vflag_copy =18014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 18 15

vflag_file = 18 vflag_func = 15 vflag_copy =18015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 1

vflag_file = 19 vflag_func = 1 vflag_copy =19001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 2

vflag_file = 19 vflag_func = 2 vflag_copy =19002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 3

vflag_file = 19 vflag_func = 3 vflag_copy =19003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 4

vflag_file = 19 vflag_func = 4 vflag_copy =19004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 5

vflag_file = 19 vflag_func = 5 vflag_copy =19005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 6

vflag_file = 19 vflag_func = 6 vflag_copy =19006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 7

vflag_file = 19 vflag_func = 7 vflag_copy =19007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 8

vflag_file = 19 vflag_func = 8 vflag_copy =19008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 9

vflag_file = 19 vflag_func = 9 vflag_copy =19009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 10

vflag_file = 19 vflag_func = 10 vflag_copy =19010  
TEST STRING 
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 11

vflag_file = 19 vflag_func = 11 vflag_copy =19011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 12

vflag_file = 19 vflag_func = 12 vflag_copy =19012  
APrinted from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 13

vflag_file = 19 vflag_func = 13 vflag_copy =19013  
STRING#Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 14

vflag_file = 19 vflag_func = 14 vflag_copy =19014  
APrinted from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 15

vflag_file = 19 vflag_func = 15 vflag_copy =19015  
TEST 
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 19 16

vflag_file = 19 vflag_func = 16 vflag_copy =19016  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 21 1

vflag_file = 21 vflag_func = 1 vflag_copy =21001  
00Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 21 2

vflag_file = 21 vflag_func = 2 vflag_copy =21002  
00Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 21 3

vflag_file = 21 vflag_func = 3 vflag_copy =21003  
100Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 21 4

 

Confirmed Negative 

ASan being tested on 01.w_Defects 22 1

vflag_file = 22 vflag_func = 1 vflag_copy =22001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 23 1

ASAN:SIGSEGV 
================================================================= 
==15164==ERROR: AddressSanitizer: SEGV on unknown address 0x0000bfff8001 (pc 0x000000506a0f bp 0x000000000000 sp 0x7ffcbb846110 T0) 
    #0 0x506a0e in invalid_extern_001 2 
    #1 0x506a0e in invalid_extern_main 1 
    #2 0x4cef96 in main 3 
    #3 0x7f4ad3603ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 2 in invalid_extern_001 
==15164==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 23 2

ASAN:SIGSEGV 
================================================================= 
==15166==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x000000506a91 bp 0x000000000000 sp 0x7ffe3188c410 T0) 
    #0 0x506a90 in invalid_extern_002 4 
    #1 0x506a90 in invalid_extern_main 6 
    #2 0x4cef96 in main 3 
    #3 0x7f37bb43dec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 4 in invalid_extern_002 
==15166==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 23 3

vflag_file = 23 vflag_func = 3 vflag_copy =23003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 23 4

vflag_file = 23 vflag_func = 4 vflag_copy =23004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 23 5

vflag_file = 23 vflag_func = 5 vflag_copy =23005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 23 6

ASAN:SIGSEGV 
================================================================= 
==15174==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000001 (pc 0x000000506c52 bp 0x000000000000 sp 0x7ffde95607a0 T0) 
    #0 0x506c51 in invalid_extern_006 6 
    #1 0x506c51 in invalid_extern_main 6 
    #2 0x4cef96 in main 3 
    #3 0x7f661a926ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 6 in invalid_extern_006 
==15174==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 24 1

vflag_file = 24 vflag_func = 1 vflag_copy =24001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 24 2

================================================================= 
==15178==ERROR: AddressSanitizer: heap-use-after-free on address 0x60400000dfd8 at pc 0x00000050ab7a bp 0x7fffafe26d30 sp 0x7fffafe26d28 
READ of size 8 at 0x60400000dfd8 thread T0 
    #0 0x50ab79 in invalid_memory_access_002 0 
    #1 0x50ab79 in invalid_memory_access_main 3 
    #2 0x4cefe1 in main 3 
    #3 0x7f5b4277dec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
0x60400000dfd8 is located 8 bytes inside of 40-byte region [0x60400000dfd0,0x60400000dff8) 
freed by thread T0 here: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x50a043 in invalid_memory_access_002 6 
    #2 0x50a043 in invalid_memory_access_main 3 
    #3 0x4cefe1 in main 3 
 
previously allocated by thread T0 here: 
    #0 0x4a6a2b in malloc 3 
    #1 0x50a037 in invalid_memory_access_002 7 
    #2 0x50a037 in invalid_memory_access_main 3 
    #3 0x4cefe1 in main 3 
 
SUMMARY: AddressSanitizer: heap-use-after-free 0 in invalid_memory_access_002 
Shadow bytes around the buggy address: 
  0x0c087fff9ba0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9bb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9bc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9bd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9be0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
=>0x0c087fff9bf0: fa fa fa fa fa fa fa fa fa fa fd[fd]fd fd fd fa 
  0x0c087fff9c00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9c10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9c20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9c30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9c40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15178==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 24 3

vflag_file = 24 vflag_func = 3 vflag_copy =24003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 24 4

================================================================= 
==15182==ERROR: AddressSanitizer: heap-use-after-free on address 0x60b00000af90 at pc 0x000000430b08 bp 0x7ffeeac6bb10 sp 0x7ffeeac6b2d0 
READ of size 2 at 0x60b00000af90 thread T0 
    #0 0x430b07 in printf_common(void*, char const*, __va_list_tag*) 9 
    #1 0x43267e in __interceptor_vprintf 1 
    #2 0x43267e in __interceptor_printf 6 
    #3 0x50a154 in invalid_memory_access_004 9 
    #4 0x50a154 in invalid_memory_access_main 3 
    #5 0x4cefe1 in main 3 
    #6 0x7fa21fbc7ec4 in __libc_start_main 7 
    #7 0x417cd5 in _start ) 
 
0x60b00000af90 is located 0 bytes inside of 100-byte region [0x60b00000af90,0x60b00000aff4) 
freed by thread T0 here: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x50a145 in invalid_memory_access_004 3 
    #2 0x50a145 in invalid_memory_access_main 3 
    #3 0x4cefe1 in main 3 
 
previously allocated by thread T0 here: 
    #0 0x4a6a2b in malloc 3 
    #1 0x50a135 in invalid_memory_access_004 3 
    #2 0x50a135 in invalid_memory_access_main 3 
    #3 0x4cefe1 in main 3 
 
SUMMARY: AddressSanitizer: heap-use-after-free 9 in printf_common(void*, char const*, __va_list_tag*) 
Shadow bytes around the buggy address: 
  0x0c167fff95a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c167fff95b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c167fff95c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c167fff95d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c167fff95e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
=>0x0c167fff95f0: fa fa[fd]fd fd fd fd fd fd fd fd fd fd fd fd fa 
  0x0c167fff9600: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c167fff9610: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c167fff9620: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c167fff9630: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c167fff9640: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15182==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 24 5

vflag_file = 24 vflag_func = 5 vflag_copy =24005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 24 6

================================================================= 
==15186==ERROR: AddressSanitizer: heap-use-after-free on address 0x60300000efe0 at pc 0x000000508efb bp 0x7ffe1918abf0 sp 0x7ffe1918abe8 
READ of size 4 at 0x60300000efe0 thread T0 
    #0 0x508efa in invalid_memory_access_006 9 
    #1 0x50a1de in invalid_memory_access_main 3 
    #2 0x4cefe1 in main 3 
    #3 0x7fc67f573ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
0x60300000efe0 is located 0 bytes inside of 20-byte region [0x60300000efe0,0x60300000eff4) 
freed by thread T0 here: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x508d61 in invalid_memory_access_006 2 
    #2 0x50a1de in invalid_memory_access_main 3 
    #3 0x4cefe1 in main 3 
 
previously allocated by thread T0 here: 
    #0 0x4a6bb4 in calloc 3 
    #1 0x508bdb in invalid_memory_access_006 2 
    #2 0x50a1de in invalid_memory_access_main 3 
    #3 0x4cefe1 in main 3 
 
SUMMARY: AddressSanitizer: heap-use-after-free 9 in invalid_memory_access_006 
Shadow bytes around the buggy address: 
  0x0c067fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9de0: fa fa fa fa fa fa fa fa fa fa fd fd fd fa fa fa 
=>0x0c067fff9df0: fd fd fd fa fa fa fd fd fd fa fa fa[fd]fd fd fa 
  0x0c067fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15186==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 24 7

================================================================= 
==15188==ERROR: AddressSanitizer: heap-use-after-free on address 0x60400000dfe0 at pc 0x00000050ab8c bp 0x7ffe2f210fd0 sp 0x7ffe2f210fc8 
READ of size 8 at 0x60400000dfe0 thread T0 
    #0 0x50ab8b in invalid_memory_access_007 9 
    #1 0x50ab8b in invalid_memory_access_main 8 
    #2 0x4cefe1 in main 3 
    #3 0x7f1728e10ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
0x60400000dfe0 is located 16 bytes inside of 40-byte region [0x60400000dfd0,0x60400000dff8) 
freed by thread T0 here: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x50a239 in invalid_memory_access_007 2 
    #2 0x50a239 in invalid_memory_access_main 8 
    #3 0x4cefe1 in main 3 
 
previously allocated by thread T0 here: 
    #0 0x4a6a2b in malloc 3 
    #1 0x50a22e in invalid_memory_access_007 4 
    #2 0x50a22e in invalid_memory_access_main 8 
    #3 0x4cefe1 in main 3 
 
SUMMARY: AddressSanitizer: heap-use-after-free 9 in invalid_memory_access_007 
Shadow bytes around the buggy address: 
  0x0c087fff9ba0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9bb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9bc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9bd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9be0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
=>0x0c087fff9bf0: fa fa fa fa fa fa fa fa fa fa fd fd[fd]fd fd fa 
  0x0c087fff9c00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9c10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9c20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9c30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c087fff9c40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15188==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 24 8

vflag_file = 24 vflag_func = 8 vflag_copy =24008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 24 9

================================================================= 
==15192==ERROR: AddressSanitizer: heap-use-after-free on address 0x60700000dfb0 at pc 0x0000005090de bp 0x7fff5be96110 sp 0x7fff5be96108 
READ of size 8 at 0x60700000dfb0 thread T0 
    #0 0x5090dd in invalid_memory_access_009 5 
    #1 0x50a2ed in invalid_memory_access_main 3 
    #2 0x4cefe1 in main 3 
    #3 0x7f9947595ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
0x60700000dfb0 is located 0 bytes inside of 80-byte region [0x60700000dfb0,0x60700000e000) 
freed by thread T0 here: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x50906e in invalid_memory_access_009 2 
    #2 0x4cefe1 in main 3 
 
previously allocated by thread T0 here: 
    #0 0x4a6a2b in malloc 3 
    #1 0x508fde in invalid_memory_access_009 9 
    #2 0x4cefe1 in main 3 
 
SUMMARY: AddressSanitizer: heap-use-after-free 5 in invalid_memory_access_009 
Shadow bytes around the buggy address: 
  0x0c0e7fff9ba0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9bb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9bc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9bd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9be0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
=>0x0c0e7fff9bf0: fa fa fa fa fa fa[fd]fd fd fd fd fd fd fd fd fd 
  0x0c0e7fff9c00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9c10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9c20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9c30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9c40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15192==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 24 10

vflag_file = 24 vflag_func = 10 vflag_copy =24010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 24 11

vflag_file = 24 vflag_func = 11 vflag_copy =24011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 24 12

================================================================= 
==15198==ERROR: AddressSanitizer: heap-use-after-free on address 0x60200000eff0 at pc 0x00000050ab72 bp 0x7ffdeab2c9b0 sp 0x7ffdeab2c9a8 
READ of size 4 at 0x60200000eff0 thread T0 
    #0 0x50ab71 in invalid_memory_access_012_func_001 5 
    #1 0x50ab71 in invalid_memory_access_012 7 
    #2 0x50ab71 in invalid_memory_access_main 3 
    #3 0x4cefe1 in main 3 
    #4 0x7ff602d09ec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
0x60200000eff0 is located 0 bytes inside of 12-byte region [0x60200000eff0,0x60200000effc) 
freed by thread T0 here: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x50a3d7 in invalid_memory_access_012_func_001 0 
    #2 0x50a3d7 in invalid_memory_access_012 7 
    #3 0x50a3d7 in invalid_memory_access_main 3 
    #4 0x4cefe1 in main 3 
 
previously allocated by thread T0 here: 
    #0 0x4a6bb4 in calloc 3 
    #1 0x50a3c0 in invalid_memory_access_012_func_001 1 
    #2 0x50a3c0 in invalid_memory_access_012 7 
    #3 0x50a3c0 in invalid_memory_access_main 3 
    #4 0x4cefe1 in main 3 
 
SUMMARY: AddressSanitizer: heap-use-after-free 5 in invalid_memory_access_012_func_001 
Shadow bytes around the buggy address: 
  0x0c047fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9de0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
=>0x0c047fff9df0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa[fd]fd 
  0x0c047fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15198==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 24 13

================================================================= 
==15200==ERROR: AddressSanitizer: heap-use-after-free on address 0x60200000eff0 at pc 0x00000050a936 bp 0x7ffc31ed7630 sp 0x7ffc31ed7628 
READ of size 4 at 0x60200000eff0 thread T0 
    #0 0x50a935 in invalid_memory_access_013_func_002 8 
    #1 0x50a935 in invalid_memory_access_013 4 
    #2 0x50a935 in invalid_memory_access_main 8 
    #3 0x4cefe1 in main 3 
    #4 0x7ff68d172ec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
0x60200000eff0 is located 0 bytes inside of 12-byte region [0x60200000eff0,0x60200000effc) 
freed by thread T0 here: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x50a481 in invalid_memory_access_013_func_002 5 
    #2 0x50a481 in invalid_memory_access_013 4 
    #3 0x50a481 in invalid_memory_access_main 8 
    #4 0x4cefe1 in main 3 
 
previously allocated by thread T0 here: 
    #0 0x4a6bb4 in calloc 3 
    #1 0x50a457 in invalid_memory_access_013_func_001 7 
    #2 0x50a457 in invalid_memory_access_013 3 
    #3 0x50a457 in invalid_memory_access_main 8 
    #4 0x4cefe1 in main 3 
 
SUMMARY: AddressSanitizer: heap-use-after-free 8 in invalid_memory_access_013_func_002 
Shadow bytes around the buggy address: 
  0x0c047fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9de0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
=>0x0c047fff9df0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa[fd]fd 
  0x0c047fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15200==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 24 14

================================================================= 
==15202==ERROR: AddressSanitizer: heap-use-after-free on address 0x60300000efe8 at pc 0x00000050a8fb bp 0x7ffe3498b4b0 sp 0x7ffe3498b4a8 
READ of size 4 at 0x60300000efe8 thread T0 
    #0 0x50a8fa in invalid_memory_access_014 5 
    #1 0x50a8fa in invalid_memory_access_main 4 
    #2 0x4cefe1 in main 3 
    #3 0x7f3512396ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
0x60300000efe8 is located 8 bytes inside of 20-byte region [0x60300000efe0,0x60300000eff4) 
freed by thread T0 here: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x50a51c in invalid_memory_access_014 5 
    #2 0x50a51c in invalid_memory_access_main 4 
    #3 0x4cefe1 in main 3 
 
previously allocated by thread T0 here: 
    #0 0x4a6a2b in malloc 3 
    #1 0x50a511 in invalid_memory_access_014 3 
    #2 0x50a511 in invalid_memory_access_main 4 
    #3 0x4cefe1 in main 3 
 
SUMMARY: AddressSanitizer: heap-use-after-free 5 in invalid_memory_access_014 
Shadow bytes around the buggy address: 
  0x0c067fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9de0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
=>0x0c067fff9df0: fa fa fa fa fa fa fa fa fa fa fa fa fd[fd]fd fa 
  0x0c067fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c067fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15202==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 24 15

vflag_file = 24 vflag_func = 15 vflag_copy =24015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 24 16

================================================================= 
==15206==ERROR: AddressSanitizer: heap-use-after-free on address 0x60700000dfb0 at pc 0x000000509bd1 bp 0x7ffdb1c02e50 sp 0x7ffdb1c02e48 
READ of size 8 at 0x60700000dfb0 thread T0 
    #0 0x509bd0 in invalid_memory_access_016_func_003 1 
    #1 0x509bd0 in invalid_memory_access_016 3 
    #2 0x50a5df in invalid_memory_access_main 3 
    #3 0x4cefe1 in main 3 
    #4 0x7f63fdc46ec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
0x60700000dfb0 is located 0 bytes inside of 80-byte region [0x60700000dfb0,0x60700000e000) 
freed by thread T0 here: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x509b45 in invalid_memory_access_016 6 
    #2 0x50a5df in invalid_memory_access_main 3 
    #3 0x4cefe1 in main 3 
 
previously allocated by thread T0 here: 
    #0 0x4a6a2b in malloc 3 
    #1 0x50945a in invalid_memory_access_016_func_002 2 
    #2 0x50a5df in invalid_memory_access_main 3 
    #3 0x4cefe1 in main 3 
 
SUMMARY: AddressSanitizer: heap-use-after-free 1 in invalid_memory_access_016_func_003 
Shadow bytes around the buggy address: 
  0x0c0e7fff9ba0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9bb0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9bc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9bd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9be0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
=>0x0c0e7fff9bf0: fa fa fa fa fa fa[fd]fd fd fd fd fd fd fd fd fd 
  0x0c0e7fff9c00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9c10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9c20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9c30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c0e7fff9c40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15206==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 24 17

================================================================= 
==15208==ERROR: AddressSanitizer: heap-use-after-free on address 0x60200000eff0 at pc 0x00000049326b bp 0x7ffcf968f7b0 sp 0x7ffcf968ef70 
READ of size 2 at 0x60200000eff0 thread T0 
    #0 0x49326a in __interceptor_strcpy 5 
    #1 0x50a67d in invalid_memory_access_017_func_004 2 
    #2 0x50a67d in invalid_memory_access_017 5 
    #3 0x50a67d in invalid_memory_access_main 0 
    #4 0x4cefe1 in main 3 
    #5 0x7ff185205ec4 in __libc_start_main 7 
    #6 0x417cd5 in _start ) 
 
0x60200000eff0 is located 0 bytes inside of 10-byte region [0x60200000eff0,0x60200000effa) 
freed by thread T0 here: 
    #0 0x4a674b in __interceptor_free 3 
    #1 0x50a65a in invalid_memory_access_017_func_003 2 
    #2 0x50a65a in invalid_memory_access_017 6 
    #3 0x50a65a in invalid_memory_access_main 0 
    #4 0x4cefe1 in main 3 
 
previously allocated by thread T0 here: 
    #0 0x4a6a2b in malloc 3 
    #1 0x50a62f in invalid_memory_access_017_func_003 7 
    #2 0x50a62f in invalid_memory_access_017 6 
    #3 0x50a62f in invalid_memory_access_main 0 
    #4 0x4cefe1 in main 3 
 
SUMMARY: AddressSanitizer: heap-use-after-free 5 in __interceptor_strcpy 
Shadow bytes around the buggy address: 
  0x0c047fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9de0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
=>0x0c047fff9df0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa[fd]fd 
  0x0c047fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e30: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e40: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15208==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 25 1

================================================================= 
==15210==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffdf3ff70e8 at pc 0x00000050c1b1 bp 0x7ffdf3ff70b0 sp 0x7ffdf3ff70a8 
READ of size 4 at 0x7ffdf3ff70e8 thread T0 
    #0 0x50c1b0 in littlemem_st_001 3 
    #1 0x50c1b0 in littlemem_st_main 2 
    #2 0x4cf02c in main 3 
    #3 0x7fa9d7de8ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffdf3ff70e8 is located in stack of thread T0 at offset 40 in frame 
    #0 0x50ba6f in littlemem_st_main 9 
 
  This frame has 1 object(s): 
    [32, 42) 'buf.i' <== Memory access at offset 40 partially overflows this variable 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 3 in littlemem_st_001 
Shadow bytes around the buggy address: 
  0x10003e7f6dc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e7f6dd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e7f6de0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e7f6df0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e7f6e00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
=>0x10003e7f6e10: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00[02]f3 f3 
  0x10003e7f6e20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e7f6e30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e7f6e40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e7f6e50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e7f6e60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15210==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 25 2

vflag_file = 25 vflag_func = 2 vflag_copy =25002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 25 3

vflag_file = 25 vflag_func = 3 vflag_copy =25003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 25 4

vflag_file = 25 vflag_func = 4 vflag_copy =25004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 25 5

vflag_file = 25 vflag_func = 5 vflag_copy =25005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 25 6

vflag_file = 25 vflag_func = 6 vflag_copy =25006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 25 7

vflag_file = 25 vflag_func = 7 vflag_copy =25007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 25 8

vflag_file = 25 vflag_func = 8 vflag_copy =25008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 25 9

vflag_file = 25 vflag_func = 9 vflag_copy =25009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 25 10

vflag_file = 25 vflag_func = 10 vflag_copy =25010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 25 11

vflag_file = 25 vflag_func = 11 vflag_copy =25011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 27 1

vflag_file = 27 vflag_func = 1 vflag_copy =27001  
Task1! Lock Never Unlock, threadID# 140639555548928! gbl1 = 1  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 27 2

 

Confirmed Negative 

ASan being tested on 01.w_Defects 27 3

 

Confirmed Negative 

ASan being tested on 01.w_Defects 27 4

vflag_file = 27 vflag_func = 4 vflag_copy =27004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 27 5

vflag_file = 27 vflag_func = 5 vflag_copy =27005  
Task5! Lock Never Unlock, threadID# 140350170593024! gbl5 = 5  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 27 6

vflag_file = 27 vflag_func = 6 vflag_copy =27006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 27 7

 

Confirmed Negative 

ASan being tested on 01.w_Defects 27 8

vflag_file = 27 vflag_func = 8 vflag_copy =27008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 27 9

 

Confirmed Negative 

ASan being tested on 01.w_Defects 28 1

 

Confirmed Negative 

ASan being tested on 01.w_Defects 28 2

vflag_file = 28 vflag_func = 2 vflag_copy =28002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 28 3

vflag_file = 28 vflag_func = 3 vflag_copy =28003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 28 4

vflag_file = 28 vflag_func = 4 vflag_copy =28004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 28 5

vflag_file = 28 vflag_func = 5 vflag_copy =28005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 28 6

vflag_file = 28 vflag_func = 6 vflag_copy =28006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 28 7

ASAN:SIGSEGV 
================================================================= 
==15273==ERROR: AddressSanitizer: SEGV on unknown address 0x0000a009c81f (pc 0x0000004d3d67 bp 0x000000000000 sp 0x7ffcd7b23500 T0) 
    #0 0x4d3d66 in memory_allocation_failure_007_func_001 4 
    #1 0x4d3d66 in memory_allocation_failure_007 1 
    #2 0x4d3d66 in memory_allocation_failure_main 5 
    #3 0x4cf10d in main 3 
    #4 0x7f28f594dec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 4 in memory_allocation_failure_007_func_001 
==15273==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 28 8

vflag_file = 28 vflag_func = 8 vflag_copy =28008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 28 9

vflag_file = 28 vflag_func = 9 vflag_copy =28009  
String Test123Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 28 10

 

Confirmed Negative 

ASan being tested on 01.w_Defects 28 11

==15280==WARNING: AddressSanitizer failed to allocate 0xfffffffffffffff8 bytes 
==15280==AddressSanitizer's allocator is terminating the process instead of returning 0 
==15280==If you don't like this behavior set allocator_may_return_null=1 
==15280==AddressSanitizer CHECK failed: 6 "((0)) != (0)" (0x0, 0x0) 
    #0 0x4aefbd in __asan::AsanCheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) 3 
    #1 0x4b2be1 in __sanitizer::CheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) 5 
    #2 0x4b1683 in __sanitizer::ReportAllocatorCannotReturnNull() 3 
    #3 0x41942a in ReturnNullOrDie 5 
    #4 0x41942a in __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool) 9 
    #5 0x4a6ae4 in malloc 0 
    #6 0x4d30e0 in memory_allocation_failure_011_func_002 3 
    #7 0x4d30e0 in memory_allocation_failure_011 1 
    #8 0x4d4135 in memory_allocation_failure_main 3 
    #9 0x4cf10d in main 3 
    #10 0x7f7de85cbec4 in __libc_start_main 7 
    #11 0x417cd5 in _start ) 
 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 28 12

==15282==AddressSanitizer's allocator is terminating the process instead of returning 0 
==15282==If you don't like this behavior set allocator_may_return_null=1 
==15282==AddressSanitizer CHECK failed: 6 "((0)) != (0)" (0x0, 0x0) 
    #0 0x4aefbd in __asan::AsanCheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) 3 
    #1 0x4b2be1 in __sanitizer::CheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) 5 
    #2 0x4b1683 in __sanitizer::ReportAllocatorCannotReturnNull() 3 
    #3 0x418451 in ReturnNullOrDie 5 
    #4 0x418451 in Calloc 6 
    #5 0x418451 in __asan::asan_calloc(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*) 2 
    #6 0x4a6c7b in calloc 0 
    #7 0x4d4190 in memory_allocation_failure_012_func_002 1 
    #8 0x4d4190 in memory_allocation_failure_012 1 
    #9 0x4d4190 in memory_allocation_failure_main 0 
    #10 0x4cf10d in main 3 
    #11 0x7f77edbf6ec4 in __libc_start_main 7 
    #12 0x417cd5 in _start ) 
 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 28 13

vflag_file = 28 vflag_func = 13 vflag_copy =28013  
84Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 28 14

vflag_file = 28 vflag_func = 14 vflag_copy =28014  
0 10.500000Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 28 15

==15288==WARNING: AddressSanitizer failed to allocate 0xfffffffffffffffc bytes 
==15288==AddressSanitizer's allocator is terminating the process instead of returning 0 
==15288==If you don't like this behavior set allocator_may_return_null=1 
==15288==AddressSanitizer CHECK failed: 6 "((0)) != (0)" (0x0, 0x0) 
    #0 0x4aefbd in __asan::AsanCheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) 3 
    #1 0x4b2be1 in __sanitizer::CheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) 5 
    #2 0x4b1683 in __sanitizer::ReportAllocatorCannotReturnNull() 3 
    #3 0x41942a in ReturnNullOrDie 5 
    #4 0x41942a in __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool) 9 
    #5 0x4a6ae4 in malloc 0 
    #6 0x4d432a in memory_allocation_failure_015_func_002 0 
    #7 0x4d432a in memory_allocation_failure_015_func_003 5 
    #8 0x4d432a in memory_allocation_failure_015 5 
    #9 0x4d432a in memory_allocation_failure_main 5 
    #10 0x4cf10d in main 3 
    #11 0x7f48026d4ec4 in __libc_start_main 7 
    #12 0x417cd5 in _start ) 
 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 28 16

vflag_file = 28 vflag_func = 16 vflag_copy =28016  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 1

 

Confirmed Negative 

ASan being tested on 01.w_Defects 29 2

vflag_file = 29 vflag_func = 2 vflag_copy =29002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 3

vflag_file = 29 vflag_func = 3 vflag_copy =29003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 4

vflag_file = 29 vflag_func = 4 vflag_copy =29004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 5

vflag_file = 29 vflag_func = 5 vflag_copy =29005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 6

vflag_file = 29 vflag_func = 6 vflag_copy =29006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 7

vflag_file = 29 vflag_func = 7 vflag_copy =29007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 8

vflag_file = 29 vflag_func = 8 vflag_copy =29008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 9

vflag_file = 29 vflag_func = 9 vflag_copy =29009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 10

vflag_file = 29 vflag_func = 10 vflag_copy =29010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 11

vflag_file = 29 vflag_func = 11 vflag_copy =29011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 12

vflag_file = 29 vflag_func = 12 vflag_copy =29012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 13

vflag_file = 29 vflag_func = 13 vflag_copy =29013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 14

vflag_file = 29 vflag_func = 14 vflag_copy =29014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 15

vflag_file = 29 vflag_func = 15 vflag_copy =29015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 16

vflag_file = 29 vflag_func = 16 vflag_copy =29016  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 17

vflag_file = 29 vflag_func = 17 vflag_copy =29017  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 29 18

vflag_file = 29 vflag_func = 18 vflag_copy =29018  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 30 1

vflag_file = 30 vflag_func = 1 vflag_copy =30001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 30 2

vflag_file = 30 vflag_func = 2 vflag_copy =30002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 30 3

vflag_file = 30 vflag_func = 3 vflag_copy =30003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 30 4

vflag_file = 30 vflag_func = 4 vflag_copy =30004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 31 1

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 2

vflag_file = 31 vflag_func = 2 vflag_copy =31002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 31 3

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 4

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 5

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 6

ASAN:SIGSEGV 
================================================================= 
==15345==ERROR: AddressSanitizer: SEGV on unknown address 0x00006b8b4567 (pc 0x0000004da59b bp 0x000000000000 sp 0x7fffaa575740 T0) 
    #0 0x4da59a in null_pointer_006 5 
    #1 0x4da59a in null_pointer_main 4 
    #2 0x4cf1ee in main 3 
    #3 0x7f160f926ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in null_pointer_006 
==15345==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 7

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 8

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 9

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 10

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 11

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 12

ASAN:SIGSEGV 
================================================================= 
==15357==ERROR: AddressSanitizer: SEGV on unknown address 0x00000000000c (pc 0x0000004da77c bp 0x000000000000 sp 0x7ffce64b4ed0 T0) 
    #0 0x4da77b in null_pointer_012 7 
    #1 0x4da77b in null_pointer_main 4 
    #2 0x4cf1ee in main 3 
    #3 0x7f98a72fbec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 7 in null_pointer_012 
==15357==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 13

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 14

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 15

ASAN:SIGSEGV 
================================================================= 
==15363==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f02f844f496 bp 0x7ffc4189f0f0 sp 0x7ffc4189e888 T0) 
    #0 0x7f02f844f495  2 
    #1 0x48fa7d in __asan_memcpy 3 
    #2 0x4da879 in null_pointer_015 2 
    #3 0x4da879 in null_pointer_main 9 
    #4 0x4cf1ee in main 3 
    #5 0x7f02f831eec4 in __libc_start_main 7 
    #6 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 2  
==15363==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 31 17

ASAN:SIGSEGV 
================================================================= 
==15365==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x0000004da02f bp 0x000000000000 sp 0x7ffd68cb81f0 T0) 
    #0 0x4da02e in null_pointer_017 4 
    #1 0x4cf1ee in main 3 
    #2 0x7f4c0405bec4 in __libc_start_main 7 
    #3 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 4 in null_pointer_017 
==15365==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 1

================================================================= 
==15367==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc529bb285 at pc 0x0000004e37ce bp 0x7ffc529bb070 sp 0x7ffc529bb068 
WRITE of size 1 at 0x7ffc529bb285 thread T0 
    #0 0x4e37cd in overrun_st_001 9 
    #1 0x4e37cd in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f9e1c056ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffc529bb285 is located in stack of thread T0 at offset 517 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' 
    [512, 517) 'buf.i' <== Memory access at offset 517 overflows this variable 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 9 in overrun_st_001 
Shadow bytes around the buggy address: 
  0x10000a52f600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a52f610: f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 
  0x10000a52f620: 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 f2 f2 f2 f2 
  0x10000a52f630: 00 02 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a52f640: 00 00 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 f2 f2 
=>0x10000a52f650:[05]f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a52f660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a52f670: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a52f680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a52f690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a52f6a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15367==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 2

================================================================= 
==15369==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffdf1572daa at pc 0x0000004e383a bp 0x7ffdf1572c90 sp 0x7ffdf1572c88 
WRITE of size 2 at 0x7ffdf1572daa thread T0 
    #0 0x4e3839 in overrun_st_002 9 
    #1 0x4e3839 in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f2b06563ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffdf1572daa is located in stack of thread T0 at offset 266 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' <== Memory access at offset 266 overflows this variable 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 9 in overrun_st_002 
Shadow bytes around the buggy address: 
  0x10003e2a6560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e2a6570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e2a6580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e2a6590: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x10003e2a65a0: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
=>0x10003e2a65b0: f2 f2 f2 f2 00[02]f2 f2 00 00 00 00 00 00 00 00 
  0x10003e2a65c0: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 04 f2 
  0x10003e2a65d0: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x10003e2a65e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e2a65f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003e2a6600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15369==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 3

vflag_file = 32 vflag_func = 3 vflag_copy =32003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 4

================================================================= 
==15373==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe78d250f4 at pc 0x0000004e3901 bp 0x7ffe78d24f10 sp 0x7ffe78d24f08 
WRITE of size 4 at 0x7ffe78d250f4 thread T0 
    #0 0x4e3900 in overrun_st_004 9 
    #1 0x4e3900 in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f6a3d553ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffe78d250f4 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 9 in overrun_st_004 
Shadow bytes around the buggy address: 
  0x10004f19c9c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10004f19c9d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10004f19c9e0: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x10004f19c9f0: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x10004f19ca00: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x10004f19ca10: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x10004f19ca20: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x10004f19ca30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10004f19ca40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10004f19ca50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10004f19ca60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15373==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 5

================================================================= 
==15375==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd01a8e468 at pc 0x0000004e5013 bp 0x7ffd01a8e410 sp 0x7ffd01a8e408 
WRITE of size 8 at 0x7ffd01a8e468 thread T0 
    #0 0x4e5012 in overrun_st_005 9 
    #1 0x4e5012 in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7fa604274ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffd01a8e468 is located in stack of thread T0 at offset 72 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' <== Memory access at offset 72 overflows this variable 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 9 in overrun_st_005 
Shadow bytes around the buggy address: 
  0x100020349c30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100020349c40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100020349c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100020349c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100020349c70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
=>0x100020349c80: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00[f2]f2 f2 
  0x100020349c90: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x100020349ca0: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
  0x100020349cb0: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 04 f2 
  0x100020349cc0: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x100020349cd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15375==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 6

================================================================= 
==15377==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffdc074dc44 at pc 0x0000004e3991 bp 0x7ffdc074dbb0 sp 0x7ffdc074dba8 
WRITE of size 4 at 0x7ffdc074dc44 thread T0 
    #0 0x4e3990 in overrun_st_006 9 
    #1 0x4e3990 in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f7436c77ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffdc074dc44 is located in stack of thread T0 at offset 132 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' <== Memory access at offset 132 overflows this variable 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 9 in overrun_st_006 
Shadow bytes around the buggy address: 
  0x1000380e1b30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000380e1b40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000380e1b50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000380e1b60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000380e1b70: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00 00 
=>0x1000380e1b80: 00 f2 f2 f2 f2 f2 00 00[04]f2 f2 f2 f2 f2 00 00 
  0x1000380e1b90: 00 00 00 f2 f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 
  0x1000380e1ba0: 00 00 00 00 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 
  0x1000380e1bb0: 00 00 04 f2 f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 
  0x1000380e1bc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000380e1bd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15377==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 7

================================================================= 
==15379==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd044c1f58 at pc 0x0000004e501d bp 0x7ffd044c1e70 sp 0x7ffd044c1e68 
WRITE of size 8 at 0x7ffd044c1f58 thread T0 
    #0 0x4e501c in overrun_st_007 9 
    #1 0x4e501c in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f49ebf93ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffd044c1f58 is located in stack of thread T0 at offset 216 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' <== Memory access at offset 216 overflows this variable 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 9 in overrun_st_007 
Shadow bytes around the buggy address: 
  0x100020890390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000208903a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000208903b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000208903c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000208903d0: f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 
=>0x1000208903e0: 04 f2 f2 f2 f2 f2 00 00 00 00 00[f2]f2 f2 f2 f2 
  0x1000208903f0: 00 02 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100020890400: 00 00 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 f2 f2 
  0x100020890410: 05 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100020890420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100020890430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15379==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 8

================================================================= 
==15381==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffff8a965cc at pc 0x0000004e3a41 bp 0x7ffff8a96410 sp 0x7ffff8a96408 
WRITE of size 4 at 0x7ffff8a965cc thread T0 
    #0 0x4e3a40 in overrun_st_008 2 
    #1 0x4e3a40 in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7fc1d19bdec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffff8a965cc is located in stack of thread T0 at offset 428 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 428 underflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 2 in overrun_st_008 
Shadow bytes around the buggy address: 
  0x10007f14ac60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10007f14ac70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10007f14ac80: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x10007f14ac90: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x10007f14aca0: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x10007f14acb0: 00 00 00 00 00 00 00 f2 f2[f2]f2 f2 00 00 04 f2 
  0x10007f14acc0: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x10007f14acd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10007f14ace0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10007f14acf0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10007f14ad00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15381==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 9

vflag_file = 32 vflag_func = 9 vflag_copy =32009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 10

vflag_file = 32 vflag_func = 10 vflag_copy =32010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 11

vflag_file = 32 vflag_func = 11 vflag_copy =32011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 12

vflag_file = 32 vflag_func = 12 vflag_copy =32012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 13

================================================================= 
==15391==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe88806174 at pc 0x0000004e3ad4 bp 0x7ffe88805f90 sp 0x7ffe88805f88 
WRITE of size 4 at 0x7ffe88806174 thread T0 
    #0 0x4e3ad3 in overrun_st_013 3 
    #1 0x4e3ad3 in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f2d39401ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffe88806174 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 3 in overrun_st_013 
Shadow bytes around the buggy address: 
  0x1000510f8bd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000510f8be0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000510f8bf0: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x1000510f8c00: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x1000510f8c10: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x1000510f8c20: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x1000510f8c30: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x1000510f8c40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000510f8c50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000510f8c60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000510f8c70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15391==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 14

ASAN:SIGSEGV 
================================================================= 
==15393==ERROR: AddressSanitizer: SEGV on unknown address 0x10009b4b87af (pc 0x0000004e1478 bp 0x7fff2c3328e0 sp 0x7fff2c332620 T0) 
    #0 0x4e1477 in overrun_st_014 3 
    #1 0x4e1477 in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f3024b19ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 3 in overrun_st_014 
==15393==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 15

================================================================= 
==15395==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff30565574 at pc 0x0000004e3bb4 bp 0x7fff30565390 sp 0x7fff30565388 
WRITE of size 4 at 0x7fff30565574 thread T0 
    #0 0x4e3bb3 in overrun_st_015 3 
    #1 0x4e3bb3 in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f1c6459bec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7fff30565574 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 3 in overrun_st_015 
Shadow bytes around the buggy address: 
  0x1000660a4a50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000660a4a60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000660a4a70: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x1000660a4a80: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x1000660a4a90: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x1000660a4aa0: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x1000660a4ab0: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x1000660a4ac0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000660a4ad0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000660a4ae0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000660a4af0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15395==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 16

================================================================= 
==15397==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc2e68c234 at pc 0x0000004e3c24 bp 0x7ffc2e68c050 sp 0x7ffc2e68c048 
WRITE of size 4 at 0x7ffc2e68c234 thread T0 
    #0 0x4e3c23 in overrun_st_016 7 
    #1 0x4e3c23 in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f8d3c4adec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffc2e68c234 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 7 in overrun_st_016 
Shadow bytes around the buggy address: 
  0x100005cc97f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100005cc9800: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 
  0x100005cc9810: 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 
  0x100005cc9820: f2 f2 00 00 00 00 00 f2 f2 f2 f2 f2 00 02 f2 f2 
  0x100005cc9830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f2 
=>0x100005cc9840: f2 f2 f2 f2 00 00[04]f2 f2 f2 f2 f2 05 f3 f3 f3 
  0x100005cc9850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100005cc9860: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100005cc9870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100005cc9880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100005cc9890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15397==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 17

================================================================= 
==15399==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff1f0c5974 at pc 0x0000004e3c94 bp 0x7fff1f0c5790 sp 0x7fff1f0c5788 
WRITE of size 4 at 0x7fff1f0c5974 thread T0 
    #0 0x4e3c93 in overrun_st_017 3 
    #1 0x4e3c93 in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7fca9db2dec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7fff1f0c5974 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 3 in overrun_st_017 
Shadow bytes around the buggy address: 
  0x100063e10ad0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100063e10ae0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100063e10af0: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x100063e10b00: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x100063e10b10: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x100063e10b20: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x100063e10b30: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x100063e10b40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100063e10b50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100063e10b60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100063e10b70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15399==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 18

vflag_file = 32 vflag_func = 18 vflag_copy =32018  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 19

================================================================= 
==15403==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffc3c48f14 at pc 0x0000004e3d27 bp 0x7fffc3c48d30 sp 0x7fffc3c48d28 
WRITE of size 4 at 0x7fffc3c48f14 thread T0 
    #0 0x4e3d26 in overrun_st_019 2 
    #1 0x4e3d26 in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7fab50973ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7fffc3c48f14 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 2 in overrun_st_019 
Shadow bytes around the buggy address: 
  0x100078781190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000787811a0: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00 00 
  0x1000787811b0: 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 
  0x1000787811c0: 00 00 00 f2 f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 
  0x1000787811d0: 00 00 00 00 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 
=>0x1000787811e0: 00 00[04]f2 f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 
  0x1000787811f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100078781200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100078781210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100078781220: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100078781230: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15403==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 20

================================================================= 
==15405==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc1dad6974 at pc 0x0000004e3d97 bp 0x7ffc1dad6790 sp 0x7ffc1dad6788 
WRITE of size 4 at 0x7ffc1dad6974 thread T0 
    #0 0x4e3d96 in overrun_st_020 4 
    #1 0x4e3d96 in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f4db7c80ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffc1dad6974 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 4 in overrun_st_020 
Shadow bytes around the buggy address: 
  0x100003b52cd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100003b52ce0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100003b52cf0: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x100003b52d00: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x100003b52d10: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x100003b52d20: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x100003b52d30: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x100003b52d40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100003b52d50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100003b52d60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100003b52d70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15405==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 21

================================================================= 
==15407==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe35fd9874 at pc 0x0000004e3e07 bp 0x7ffe35fd9690 sp 0x7ffe35fd9688 
WRITE of size 4 at 0x7ffe35fd9874 thread T0 
    #0 0x4e3e06 in overrun_st_021 4 
    #1 0x4e3e06 in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f58cc1bfec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffe35fd9874 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 4 in overrun_st_021 
Shadow bytes around the buggy address: 
  0x100046bf32b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100046bf32c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100046bf32d0: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x100046bf32e0: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x100046bf32f0: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x100046bf3300: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x100046bf3310: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x100046bf3320: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100046bf3330: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100046bf3340: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100046bf3350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15407==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 22

================================================================= 
==15409==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffdfe898cc5 at pc 0x0000004e3e74 bp 0x7ffdfe898ab0 sp 0x7ffdfe898aa8 
WRITE of size 1 at 0x7ffdfe898cc5 thread T0 
    #0 0x4e3e73 in overrun_st_022 1 
    #1 0x4e3e73 in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7fe8b08daec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffdfe898cc5 is located in stack of thread T0 at offset 517 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' 
    [512, 517) 'buf.i' <== Memory access at offset 517 overflows this variable 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 1 in overrun_st_022 
Shadow bytes around the buggy address: 
  0x10003fd0b140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003fd0b150: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00 00 
  0x10003fd0b160: 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 
  0x10003fd0b170: 00 00 00 f2 f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 
  0x10003fd0b180: 00 00 00 00 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 
=>0x10003fd0b190: 00 00 04 f2 f2 f2 f2 f2[05]f3 f3 f3 00 00 00 00 
  0x10003fd0b1a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003fd0b1b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003fd0b1c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003fd0b1d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003fd0b1e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15409==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 23

================================================================= 
==15411==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd3be89f2a at pc 0x0000004e3ee4 bp 0x7ffd3be89e10 sp 0x7ffd3be89e08 
WRITE of size 2 at 0x7ffd3be89f2a thread T0 
    #0 0x4e3ee3 in overrun_st_023 1 
    #1 0x4e3ee3 in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7ff39f2afec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffd3be89f2a is located in stack of thread T0 at offset 266 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' <== Memory access at offset 266 overflows this variable 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 1 in overrun_st_023 
Shadow bytes around the buggy address: 
  0x1000277c9390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000277c93a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000277c93b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000277c93c0: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x1000277c93d0: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
=>0x1000277c93e0: f2 f2 f2 f2 00[02]f2 f2 00 00 00 00 00 00 00 00 
  0x1000277c93f0: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 04 f2 
  0x1000277c9400: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x1000277c9410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000277c9420: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000277c9430: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15411==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 24

vflag_file = 32 vflag_func = 24 vflag_copy =32024  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 25

================================================================= 
==15415==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc259848d4 at pc 0x0000004e3fab bp 0x7ffc259846f0 sp 0x7ffc259846e8 
WRITE of size 4 at 0x7ffc259848d4 thread T0 
    #0 0x4e3faa in overrun_st_025 1 
    #1 0x4e3faa in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f7516e44ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffc259848d4 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 1 in overrun_st_025 
Shadow bytes around the buggy address: 
  0x100004b288c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100004b288d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100004b288e0: f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 
  0x100004b288f0: 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 f2 f2 f2 f2 
  0x100004b28900: 00 02 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00 
=>0x100004b28910: 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 f2 f2 f2 f2 
  0x100004b28920: 05 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100004b28930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100004b28940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100004b28950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100004b28960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15415==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 26

================================================================= 
==15417==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffef1944c68 at pc 0x0000004e5027 bp 0x7ffef1944c10 sp 0x7ffef1944c08 
WRITE of size 8 at 0x7ffef1944c68 thread T0 
    #0 0x4e5026 in overrun_st_026 1 
    #1 0x4e5026 in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f3121c9eec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffef1944c68 is located in stack of thread T0 at offset 72 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' <== Memory access at offset 72 overflows this variable 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 1 in overrun_st_026 
Shadow bytes around the buggy address: 
  0x10005e320930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10005e320940: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10005e320950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10005e320960: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10005e320970: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
=>0x10005e320980: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00[f2]f2 f2 
  0x10005e320990: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x10005e3209a0: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
  0x10005e3209b0: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 04 f2 
  0x10005e3209c0: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x10005e3209d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15417==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 27

================================================================= 
==15419==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff417b6724 at pc 0x0000004e405b bp 0x7fff417b6690 sp 0x7fff417b6688 
WRITE of size 4 at 0x7fff417b6724 thread T0 
    #0 0x4e405a in overrun_st_027 1 
    #1 0x4e405a in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f647235bec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7fff417b6724 is located in stack of thread T0 at offset 132 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' <== Memory access at offset 132 overflows this variable 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 1 in overrun_st_027 
Shadow bytes around the buggy address: 
  0x1000682eec90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000682eeca0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000682eecb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000682eecc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000682eecd0: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
=>0x1000682eece0: f2 f2 00 00[04]f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x1000682eecf0: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
  0x1000682eed00: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 04 f2 
  0x1000682eed10: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x1000682eed20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000682eed30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15419==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 28

================================================================= 
==15421==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd32a1c1d8 at pc 0x0000004e5031 bp 0x7ffd32a1c0f0 sp 0x7ffd32a1c0e8 
WRITE of size 8 at 0x7ffd32a1c1d8 thread T0 
    #0 0x4e5030 in overrun_st_028 1 
    #1 0x4e5030 in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f9ff6149ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffd32a1c1d8 is located in stack of thread T0 at offset 216 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' <== Memory access at offset 216 overflows this variable 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 1 in overrun_st_028 
Shadow bytes around the buggy address: 
  0x10002653b7e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10002653b7f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10002653b800: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10002653b810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10002653b820: f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 
=>0x10002653b830: 04 f2 f2 f2 f2 f2 00 00 00 00 00[f2]f2 f2 f2 f2 
  0x10002653b840: 00 02 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10002653b850: 00 00 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 f2 f2 
  0x10002653b860: 05 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10002653b870: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10002653b880: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15421==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 29

================================================================= 
==15423==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffeb1bd05f4 at pc 0x0000004e410b bp 0x7ffeb1bd0410 sp 0x7ffeb1bd0408 
WRITE of size 4 at 0x7ffeb1bd05f4 thread T0 
    #0 0x4e410a in overrun_st_029 3 
    #1 0x4e410a in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f144bf9cec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffeb1bd05f4 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 3 in overrun_st_029 
Shadow bytes around the buggy address: 
  0x100056372060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100056372070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100056372080: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x100056372090: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x1000563720a0: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x1000563720b0: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x1000563720c0: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x1000563720d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000563720e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000563720f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100056372100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15423==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 30

================================================================= 
==15425==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe41d61194 at pc 0x0000004e417b bp 0x7ffe41d60fb0 sp 0x7ffe41d60fa8 
WRITE of size 4 at 0x7ffe41d61194 thread T0 
    #0 0x4e417a in overrun_st_030 8 
    #1 0x4e417a in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f07b074bec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffe41d61194 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 8 in overrun_st_030 
Shadow bytes around the buggy address: 
  0x1000483a41e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000483a41f0: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00 00 
  0x1000483a4200: 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 
  0x1000483a4210: 00 00 00 f2 f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 
  0x1000483a4220: 00 00 00 00 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 
=>0x1000483a4230: 00 00[04]f2 f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 
  0x1000483a4240: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000483a4250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000483a4260: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000483a4270: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000483a4280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15425==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 31

vflag_file = 32 vflag_func = 31 vflag_copy =32031  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 32

================================================================= 
==15429==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffea07a9a74 at pc 0x0000004e420e bp 0x7ffea07a9890 sp 0x7ffea07a9888 
WRITE of size 4 at 0x7ffea07a9a74 thread T0 
    #0 0x4e420d in overrun_st_032 5 
    #1 0x4e420d in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7fa9cf702ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffea07a9a74 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 5 in overrun_st_032 
Shadow bytes around the buggy address: 
  0x1000540ed2f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000540ed300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000540ed310: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x1000540ed320: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x1000540ed330: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x1000540ed340: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x1000540ed350: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x1000540ed360: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000540ed370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000540ed380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000540ed390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15429==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 33

ASAN:SIGSEGV 
================================================================= 
==15431==ERROR: AddressSanitizer: SEGV on unknown address 0x7ffe7cd9f1dc (pc 0x0000004e21d2 bp 0x7ffcceacdd40 sp 0x7ffcceacda80 T0) 
    #0 0x4e21d1 in overrun_st_033 5 
    #1 0x4e21d1 in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f9e21d05ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in overrun_st_033 
==15431==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 34

================================================================= 
==15433==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd45a00b34 at pc 0x0000004e42ee bp 0x7ffd45a00950 sp 0x7ffd45a00948 
WRITE of size 4 at 0x7ffd45a00b34 thread T0 
    #0 0x4e42ed in overrun_st_034 7 
    #1 0x4e42ed in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f5fa8694ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffd45a00b34 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 7 in overrun_st_034 
Shadow bytes around the buggy address: 
  0x100028b38110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100028b38120: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 
  0x100028b38130: 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 
  0x100028b38140: f2 f2 00 00 00 00 00 f2 f2 f2 f2 f2 00 02 f2 f2 
  0x100028b38150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f2 
=>0x100028b38160: f2 f2 f2 f2 00 00[04]f2 f2 f2 f2 f2 05 f3 f3 f3 
  0x100028b38170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100028b38180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100028b38190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100028b381a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100028b381b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15433==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 35

================================================================= 
==15435==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd34a7fcd4 at pc 0x0000004e435e bp 0x7ffd34a7faf0 sp 0x7ffd34a7fae8 
WRITE of size 4 at 0x7ffd34a7fcd4 thread T0 
    #0 0x4e435d in overrun_st_035 1 
    #1 0x4e435d in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f1f76459ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffd34a7fcd4 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 1 in overrun_st_035 
Shadow bytes around the buggy address: 
  0x100026947f40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100026947f50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100026947f60: f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 
  0x100026947f70: 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 f2 f2 f2 f2 
  0x100026947f80: 00 02 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00 
=>0x100026947f90: 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 f2 f2 f2 f2 
  0x100026947fa0: 05 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100026947fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100026947fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100026947fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100026947fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15435==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 36

================================================================= 
==15437==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffb9408074 at pc 0x0000004e43ce bp 0x7fffb9407e90 sp 0x7fffb9407e88 
WRITE of size 4 at 0x7fffb9408074 thread T0 
    #0 0x4e43cd in overrun_st_036 5 
    #1 0x4e43cd in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f6c726c4ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7fffb9408074 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 5 in overrun_st_036 
Shadow bytes around the buggy address: 
  0x100077278fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100077278fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100077278fd0: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x100077278fe0: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x100077278ff0: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x100077279000: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x100077279010: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x100077279020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100077279030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100077279040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100077279050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15437==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 37

================================================================= 
==15439==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffed333ba14 at pc 0x0000004e443e bp 0x7ffed333b830 sp 0x7ffed333b828 
WRITE of size 4 at 0x7ffed333ba14 thread T0 
    #0 0x4e443d in overrun_st_037_func_001 5 
    #1 0x4e443d in overrun_st_037 8 
    #2 0x4e443d in overrun_st_main 6 
    #3 0x4cf239 in main 3 
    #4 0x7efe83ad0ec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
Address 0x7ffed333ba14 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 5 in overrun_st_037_func_001 
Shadow bytes around the buggy address: 
  0x10005a65f6f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10005a65f700: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00 00 
  0x10005a65f710: 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 
  0x10005a65f720: 00 00 00 f2 f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 
  0x10005a65f730: 00 00 00 00 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 
=>0x10005a65f740: 00 00[04]f2 f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 
  0x10005a65f750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10005a65f760: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10005a65f770: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10005a65f780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10005a65f790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15439==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 38

================================================================= 
==15441==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc52beacd4 at pc 0x0000004e44ae bp 0x7ffc52beaaf0 sp 0x7ffc52beaae8 
WRITE of size 4 at 0x7ffc52beacd4 thread T0 
    #0 0x4e44ad in overrun_st_038 4 
    #1 0x4e44ad in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f0b8e995ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffc52beacd4 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 4 in overrun_st_038 
Shadow bytes around the buggy address: 
  0x10000a575540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a575550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a575560: f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 
  0x10000a575570: 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 f2 f2 f2 f2 
  0x10000a575580: 00 02 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00 
=>0x10000a575590: 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 f2 f2 f2 f2 
  0x10000a5755a0: 05 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a5755b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a5755c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a5755d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000a5755e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15441==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 39

================================================================= 
==15443==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffff619aab4 at pc 0x0000004e451e bp 0x7ffff619a8d0 sp 0x7ffff619a8c8 
WRITE of size 4 at 0x7ffff619aab4 thread T0 
    #0 0x4e451d in overrun_st_039 6 
    #1 0x4e451d in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f0aba9b3ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffff619aab4 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 6 in overrun_st_039 
Shadow bytes around the buggy address: 
  0x10007ec2b500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10007ec2b510: 00 00 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 
  0x10007ec2b520: 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 
  0x10007ec2b530: f2 f2 00 00 00 00 00 f2 f2 f2 f2 f2 00 02 f2 f2 
  0x10007ec2b540: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f2 
=>0x10007ec2b550: f2 f2 f2 f2 00 00[04]f2 f2 f2 f2 f2 05 f3 f3 f3 
  0x10007ec2b560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10007ec2b570: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10007ec2b580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10007ec2b590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10007ec2b5a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15443==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 40

================================================================= 
==15445==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc0c32da94 at pc 0x0000004e458e bp 0x7ffc0c32d8b0 sp 0x7ffc0c32d8a8 
WRITE of size 4 at 0x7ffc0c32da94 thread T0 
    #0 0x4e458d in overrun_st_040 6 
    #1 0x4e458d in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7faa84f08ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffc0c32da94 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 6 in overrun_st_040 
Shadow bytes around the buggy address: 
  0x10000185db00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000185db10: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00 00 
  0x10000185db20: 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 
  0x10000185db30: 00 00 00 f2 f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 
  0x10000185db40: 00 00 00 00 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 
=>0x10000185db50: 00 00[04]f2 f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 
  0x10000185db60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000185db70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000185db80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000185db90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10000185dba0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15445==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 41

================================================================= 
==15447==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe83847b54 at pc 0x0000004e4636 bp 0x7ffe83847970 sp 0x7ffe83847968 
WRITE of size 4 at 0x7ffe83847b54 thread T0 
    #0 0x4e4635 in overrun_st_041 0 
    #1 0x4e4635 in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7fca609c6ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7ffe83847b54 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 0 in overrun_st_041 
Shadow bytes around the buggy address: 
  0x100050700f10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100050700f20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100050700f30: f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 
  0x100050700f40: 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 f2 f2 f2 f2 
  0x100050700f50: 00 02 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00 
=>0x100050700f60: 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 f2 f2 f2 f2 
  0x100050700f70: 05 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100050700f80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100050700f90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100050700fa0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100050700fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15447==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 42

================================================================= 
==15449==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffc6d9f290 at pc 0x0000004e5069 bp 0x7fffc6d9f0f0 sp 0x7fffc6d9f0e8 
WRITE of size 16 at 0x7fffc6d9f290 thread T0 
    #0 0x4e5068 in overrun_st_042 4 
    #1 0x4e5068 in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f836949cec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7fffc6d9f290 is located in stack of thread T0 at offset 400 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' <== Memory access at offset 400 partially overflows this variable 
    [448, 468) 'buf.i.1' 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 4 in overrun_st_042 
Shadow bytes around the buggy address: 
  0x100078dabe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100078dabe10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100078dabe20: f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 f2 f2 00 00 
  0x100078dabe30: 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 f2 f2 f2 f2 
  0x100078dabe40: 00 02 f2 f2 00 00 00 00 00 00 00 00 00 00 00 00 
=>0x100078dabe50: 00 00[00]f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 f2 f2 
  0x100078dabe60: 05 f3 f3 f3 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100078dabe70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100078dabe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100078dabe90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100078dabea0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15449==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 43

vflag_file = 32 vflag_func = 43 vflag_copy =32043  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 44

================================================================= 
==15453==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff4b24f174 at pc 0x0000004e489e bp 0x7fff4b24ef90 sp 0x7fff4b24ef88 
WRITE of size 4 at 0x7fff4b24f174 thread T0 
    #0 0x4e489d in overrun_st_044 6 
    #1 0x4e489d in overrun_st_main 1 
    #2 0x4cf239 in main 3 
    #3 0x7f6544316ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7fff4b24f174 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 6 in overrun_st_044 
Shadow bytes around the buggy address: 
  0x100069641dd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100069641de0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100069641df0: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x100069641e00: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x100069641e10: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x100069641e20: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x100069641e30: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x100069641e40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100069641e50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100069641e60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100069641e70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15453==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 45

================================================================= 
==15455==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff3e39d4f4 at pc 0x0000004e46a6 bp 0x7fff3e39d310 sp 0x7fff3e39d308 
WRITE of size 4 at 0x7fff3e39d4f4 thread T0 
    #0 0x4e46a5 in overrun_st_045_func_001 9 
    #1 0x4e46a5 in overrun_st_045 8 
    #2 0x4e46a5 in overrun_st_main 6 
    #3 0x4cf239 in main 3 
    #4 0x7fb78b72eec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
Address 0x7fff3e39d4f4 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 9 in overrun_st_045_func_001 
Shadow bytes around the buggy address: 
  0x100067c6ba40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100067c6ba50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100067c6ba60: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x100067c6ba70: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x100067c6ba80: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x100067c6ba90: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x100067c6baa0: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x100067c6bab0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100067c6bac0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100067c6bad0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100067c6bae0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15455==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 46

================================================================= 
==15457==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffd9f82f714 at pc 0x0000004e4716 bp 0x7ffd9f82f530 sp 0x7ffd9f82f528 
WRITE of size 4 at 0x7ffd9f82f714 thread T0 
    #0 0x4e4715 in overrun_st_046_func_001 1 
    #1 0x4e4715 in overrun_st_046 4 
    #2 0x4e4715 in overrun_st_main 1 
    #3 0x4cf239 in main 3 
    #4 0x7f05a9067ec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
Address 0x7ffd9f82f714 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 1 in overrun_st_046_func_001 
Shadow bytes around the buggy address: 
  0x100033efde90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100033efdea0: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00 00 
  0x100033efdeb0: 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 
  0x100033efdec0: 00 00 00 f2 f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 
  0x100033efded0: 00 00 00 00 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 
=>0x100033efdee0: 00 00[04]f2 f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 
  0x100033efdef0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100033efdf00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100033efdf10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100033efdf20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100033efdf30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15457==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 47

vflag_file = 32 vflag_func = 47 vflag_copy =32047  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 48

================================================================= 
==15461==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffdd56284f4 at pc 0x0000004e4786 bp 0x7ffdd5628310 sp 0x7ffdd5628308 
WRITE of size 4 at 0x7ffdd56284f4 thread T0 
    #0 0x4e4785 in overrun_st_048_func_001 3 
    #1 0x4e4785 in overrun_st_048 5 
    #2 0x4e4785 in overrun_st_main 1 
    #3 0x4cf239 in main 3 
    #4 0x7fe67e384ec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
Address 0x7ffdd56284f4 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 3 in overrun_st_048_func_001 
Shadow bytes around the buggy address: 
  0x10003aabd040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003aabd050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003aabd060: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 f2 f2 f2 
  0x10003aabd070: f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 00 00 00 f2 
  0x10003aabd080: f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 00 00 00 00 
=>0x10003aabd090: 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 00 00[04]f2 
  0x10003aabd0a0: f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 00 00 00 00 
  0x10003aabd0b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003aabd0c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003aabd0d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x10003aabd0e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15461==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 49

================================================================= 
==15463==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff1325cf14 at pc 0x0000004e47f6 bp 0x7fff1325cd30 sp 0x7fff1325cd28 
WRITE of size 4 at 0x7fff1325cf14 thread T0 
    #0 0x4e47f5 in overrun_st_049 9 
    #1 0x4e47f5 in overrun_st_main 6 
    #2 0x4cf239 in main 3 
    #3 0x7f201887fec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
Address 0x7fff1325cf14 is located in stack of thread T0 at offset 468 in frame 
    #0 0x4e0b5f in overrun_st_main 3 
 
  This frame has 7 object(s): 
    [32, 72) 'buf.i.21' 
    [112, 132) 'buf.i.20' 
    [176, 216) 'buf.i.19' 
    [256, 266) 'buf.i.15' 
    [288, 408) 'buf.i.6' 
    [448, 468) 'buf.i.1' <== Memory access at offset 468 overflows this variable 
    [512, 517) 'buf.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 9 in overrun_st_049 
Shadow bytes around the buggy address: 
  0x100062643990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x1000626439a0: 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00 00 00 
  0x1000626439b0: 00 f2 f2 f2 f2 f2 00 00 04 f2 f2 f2 f2 f2 00 00 
  0x1000626439c0: 00 00 00 f2 f2 f2 f2 f2 00 02 f2 f2 00 00 00 00 
  0x1000626439d0: 00 00 00 00 00 00 00 00 00 00 00 f2 f2 f2 f2 f2 
=>0x1000626439e0: 00 00[04]f2 f2 f2 f2 f2 05 f3 f3 f3 00 00 00 00 
  0x1000626439f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100062643a00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100062643a10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100062643a20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100062643a30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==15463==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 32 50

vflag_file = 32 vflag_func = 50 vflag_copy =32050  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 51

vflag_file = 32 vflag_func = 51 vflag_copy =32051  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 52

vflag_file = 32 vflag_func = 52 vflag_copy =32052  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 53

vflag_file = 32 vflag_func = 53 vflag_copy =32053  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 32 54

vflag_file = 32 vflag_func = 54 vflag_copy =32054  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 33 1

vflag_file = 33 vflag_func = 1 vflag_copy =33001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 33 2

vflag_file = 33 vflag_func = 2 vflag_copy =33002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 35 1

vflag_file = 35 vflag_func = 1 vflag_copy =35001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 35 2

vflag_file = 35 vflag_func = 2 vflag_copy =35002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 36 1

vflag_file = 36 vflag_func = 1 vflag_copy =36001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 36 2

 

Confirmed Negative 

ASan being tested on 01.w_Defects 36 3

 

Confirmed Negative 

ASan being tested on 01.w_Defects 36 4

vflag_file = 36 vflag_func = 4 vflag_copy =36004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 36 5

vflag_file = 36 vflag_func = 5 vflag_copy =36005  
Task5! race condition, threadID# 140048447043328! gbl1 = 1  
Task5! race condition, threadID# 140048438650624! gbl1 = 2  
Task5! race condition, threadID# 140048430257920! gbl1 = 3  
Task5! race condition, threadID# 140048421865216! gbl1 = 4  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 36 6

vflag_file = 36 vflag_func = 6 vflag_copy =36006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 36 7

vflag_file = 36 vflag_func = 7 vflag_copy =36007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 36 8

vflag_file = 36 vflag_func = 8 vflag_copy =36008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 1

vflag_file = 37 vflag_func = 1 vflag_copy =37001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 2

vflag_file = 37 vflag_func = 2 vflag_copy =37002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 3

vflag_file = 37 vflag_func = 3 vflag_copy =37003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 4

vflag_file = 37 vflag_func = 4 vflag_copy =37004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 5

vflag_file = 37 vflag_func = 5 vflag_copy =37005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 6

vflag_file = 37 vflag_func = 6 vflag_copy =37006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 7

vflag_file = 37 vflag_func = 7 vflag_copy =37007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 8

vflag_file = 37 vflag_func = 8 vflag_copy =37008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 9

vflag_file = 37 vflag_func = 9 vflag_copy =37009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 10

vflag_file = 37 vflag_func = 10 vflag_copy =37010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 11

vflag_file = 37 vflag_func = 11 vflag_copy =37011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 12

vflag_file = 37 vflag_func = 12 vflag_copy =37012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 13

vflag_file = 37 vflag_func = 13 vflag_copy =37013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 37 14

vflag_file = 37 vflag_func = 14 vflag_copy =37014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 38 1

vflag_file = 38 vflag_func = 1 vflag_copy =38001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 38 2

vflag_file = 38 vflag_func = 2 vflag_copy =38002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 1

vflag_file = 39 vflag_func = 1 vflag_copy =39001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 2

vflag_file = 39 vflag_func = 2 vflag_copy =39002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 3

vflag_file = 39 vflag_func = 3 vflag_copy =39003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 4

vflag_file = 39 vflag_func = 4 vflag_copy =39004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 5

vflag_file = 39 vflag_func = 5 vflag_copy =39005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 6

vflag_file = 39 vflag_func = 6 vflag_copy =39006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 7

vflag_file = 39 vflag_func = 7 vflag_copy =39007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 8

vflag_file = 39 vflag_func = 8 vflag_copy =39008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 9

vflag_file = 39 vflag_func = 9 vflag_copy =39009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 10

vflag_file = 39 vflag_func = 10 vflag_copy =39010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 11

vflag_file = 39 vflag_func = 11 vflag_copy =39011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 12

vflag_file = 39 vflag_func = 12 vflag_copy =39012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 13

vflag_file = 39 vflag_func = 13 vflag_copy =39013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 14

vflag_file = 39 vflag_func = 14 vflag_copy =39014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 15

vflag_file = 39 vflag_func = 15 vflag_copy =39015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 16

vflag_file = 39 vflag_func = 16 vflag_copy =39016  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 17

vflag_file = 39 vflag_func = 17 vflag_copy =39017  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 18

vflag_file = 39 vflag_func = 18 vflag_copy =39018  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 39 19

vflag_file = 39 vflag_func = 19 vflag_copy =39019  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 40 1

 

Confirmed Negative 

ASan being tested on 01.w_Defects 40 2

 

Confirmed Negative 

ASan being tested on 01.w_Defects 40 3

 

Confirmed Negative 

ASan being tested on 01.w_Defects 41 1

ASAN:SIGSEGV 
================================================================= 
==17393==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x0000004f2eda bp 0x7f4595cfee90 sp 0x7f4595cfeda0 T1) 
    #0 0x4f2ed9 in st_cross_thread_access_001_tsk_001 8 
    #1 0x7f4598e0f181 in start_thread 2 
    #2 0x7f459851a47c in clone 1 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 8 in st_cross_thread_access_001_tsk_001 
Thread T1 created by T0 here: 
    #0 0x48e689 in __interceptor_pthread_create 3 
    #1 0x4f319b in st_cross_thread_access_001 2 
    #2 0x4f45fa in st_cross_thread_access_main 3 
    #3 0x4cf4dc in main 3 
 
==17393==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 41 2

vflag_file = 41 vflag_func = 2 vflag_copy =41002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 41 3

vflag_file = 41 vflag_func = 3 vflag_copy =41003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 41 4

ASAN:SIGSEGV 
================================================================= 
==17404==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7ffa9d7c22a6 bp 0x7ffa9a7fde80 sp 0x7ffa9a7fd618 T2) 
    #0 0x7ffa9d7c22a5  6 
    #1 0x48fa7d in __asan_memcpy 3 
    #2 0x4f3b80 in st_cross_thread_access_004_tsk_002 7 
    #3 0x7ffa9e05f181 in start_thread 2 
    #4 0x7ffa9d76a47c in clone 1 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 6  
Thread T2 created by T0 here: 
    #0 0x48e689 in __interceptor_pthread_create 3 
    #1 0x4f481a in st_cross_thread_access_004 5 
    #2 0x4f481a in st_cross_thread_access_main 5 
    #3 0x4cf4dc in main 3 
 
==17404==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 41 5

vflag_file = 41 vflag_func = 5 vflag_copy =41005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 41 6

vflag_file = 41 vflag_func = 6 vflag_copy =41006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 42 1

ASAN:SIGSEGV 
================================================================= 
==17414==ERROR: AddressSanitizer: SEGV on unknown address 0x7ffcf7baaae0 (pc 0x0000004f70c4 bp 0x7ffcf84cc0c0 sp 0x7ffcf7b6aae0 T0) 
    #0 0x4f70c3 in st_overflow_main 7 
    #1 0x4cf527 in main 3 
    #2 0x7ffbabc9fec4 in __libc_start_main 7 
    #3 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 7 in st_overflow_main 
==17414==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 42 2

ASAN:SIGSEGV 
================================================================= 
==17416==ERROR: AddressSanitizer: SEGV on unknown address 0x7ffc4373f3a0 (pc 0x0000004f70c4 bp 0x7ffc44060980 sp 0x7ffc436ff3a0 T0) 
    #0 0x4f70c3 in st_overflow_main 7 
    #1 0x4cf527 in main 3 
    #2 0x7f5f48e0dec4 in __libc_start_main 7 
    #3 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 7 in st_overflow_main 
==17416==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 42 3

ASAN:SIGSEGV 
================================================================= 
==17418==ERROR: AddressSanitizer: SEGV on unknown address 0x7ffdc87ce740 (pc 0x0000004f70c4 bp 0x7ffdc90efd20 sp 0x7ffdc878e740 T0) 
    #0 0x4f70c3 in st_overflow_main 7 
    #1 0x4cf527 in main 3 
    #2 0x7f94f2d06ec4 in __libc_start_main 7 
    #3 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 7 in st_overflow_main 
==17418==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 42 4

ASAN:SIGSEGV 
================================================================= 
==17420==ERROR: AddressSanitizer: SEGV on unknown address 0x7ffd68354aa0 (pc 0x0000004f70c4 bp 0x7ffd68c76080 sp 0x7ffd68314aa0 T0) 
    #0 0x4f70c3 in st_overflow_main 7 
    #1 0x4cf527 in main 3 
    #2 0x7f27459a6ec4 in __libc_start_main 7 
    #3 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 7 in st_overflow_main 
==17420==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 42 5

ASAN:SIGSEGV 
================================================================= 
==17422==ERROR: AddressSanitizer: SEGV on unknown address 0x7fff36a983c0 (pc 0x0000004f70c4 bp 0x7fff373b99b0 sp 0x7fff36a583c0 T0) 
    #0 0x4f70c3 in st_overflow_main 7 
    #1 0x4cf527 in main 3 
    #2 0x7fd89f741ec4 in __libc_start_main 7 
    #3 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 7 in st_overflow_main 
==17422==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 42 6

ASAN:SIGSEGV 
================================================================= 
==17424==ERROR: AddressSanitizer: SEGV on unknown address 0x7ffe127c16e0 (pc 0x0000004f70c4 bp 0x7ffe130e2cd0 sp 0x7ffe127816e0 T0) 
    #0 0x4f70c3 in st_overflow_main 7 
    #1 0x4cf527 in main 3 
    #2 0x7ff195925ec4 in __libc_start_main 7 
    #3 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 7 in st_overflow_main 
==17424==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 42 7

ASAN:SIGSEGV 
================================================================= 
==17426==ERROR: AddressSanitizer: SEGV on unknown address 0x7ffe9d7fba80 (pc 0x0000004f70c4 bp 0x7ffe9e11d070 sp 0x7ffe9d7bba80 T0) 
    #0 0x4f70c3 in st_overflow_main 7 
    #1 0x4cf527 in main 3 
    #2 0x7fb873560ec4 in __libc_start_main 7 
    #3 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 7 in st_overflow_main 
==17426==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 43 1

vflag_file = 43 vflag_func = 1 vflag_copy =43001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 43 2

vflag_file = 43 vflag_func = 2 vflag_copy =43002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 43 3

================================================================= 
==17432==ERROR: AddressSanitizer: stack-buffer-underflow on address 0x7ffc4f89bf9f at pc 0x0000004ff6ca bp 0x7ffc4f89bf70 sp 0x7ffc4f89bf68 
READ of size 1 at 0x7ffc4f89bf9f thread T0 
    #0 0x4ff6c9 in st_underrun_003_func_002 1 
    #1 0x4ff6c9 in st_underrun_003 9 
    #2 0x4ff6c9 in st_underrun_main 5 
    #3 0x4cf572 in main 3 
    #4 0x7f7a718e0ec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
Address 0x7ffc4f89bf9f is located in stack of thread T0 at offset 31 in frame 
    #0 0x4ff4bf in st_underrun_main 2 
 
  This frame has 3 object(s): 
    [32, 82) 's.i.1' <== Memory access at offset 31 underflows this variable 
    [128, 138) 'buf.i.i.i' 
    [160, 190) 's.i' 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-underflow 1 in st_underrun_003_func_002 
Shadow bytes around the buggy address: 
  0x100009f0b7a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100009f0b7b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100009f0b7c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100009f0b7d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100009f0b7e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
=>0x100009f0b7f0: f1 f1 f1[f1]00 00 00 00 00 00 02 f2 f2 f2 f2 f2 
  0x100009f0b800: 00 02 f2 f2 00 00 00 06 f3 f3 f3 f3 00 00 00 00 
  0x100009f0b810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100009f0b820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100009f0b830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100009f0b840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==17432==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 43 4

================================================================= 
==17434==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffe2da4593f at pc 0x0000004ff7ba bp 0x7ffe2da45890 sp 0x7ffe2da45888 
READ of size 1 at 0x7ffe2da4593f thread T0 
    #0 0x4ff7b9 in st_underrun_004_func_001 1 
    #1 0x4ff7b9 in st_underrun_004 7 
    #2 0x4ff7b9 in st_underrun_main 0 
    #3 0x4cf572 in main 3 
    #4 0x7f0aa5bc4ec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
Address 0x7ffe2da4593f is located in stack of thread T0 at offset 159 in frame 
    #0 0x4ff4bf in st_underrun_main 2 
 
  This frame has 3 object(s): 
    [32, 82) 's.i.1' 
    [128, 138) 'buf.i.i.i' 
    [160, 190) 's.i' <== Memory access at offset 159 underflows this variable 
HINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext 
      (longjmp and C++ exceptions *are* supported) 
SUMMARY: AddressSanitizer: stack-buffer-overflow 1 in st_underrun_004_func_001 
Shadow bytes around the buggy address: 
  0x100045b40ad0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100045b40ae0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100045b40af0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100045b40b00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100045b40b10: 00 00 00 00 f1 f1 f1 f1 00 00 00 00 00 00 02 f2 
=>0x100045b40b20: f2 f2 f2 f2 00 02 f2[f2]00 00 00 06 f3 f3 f3 f3 
  0x100045b40b30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100045b40b40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100045b40b50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100045b40b60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x100045b40b70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==17434==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 43 5

vflag_file = 43 vflag_func = 5 vflag_copy =43005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 43 6

vflag_file = 43 vflag_func = 6 vflag_copy =43006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 43 7

vflag_file = 43 vflag_func = 7 vflag_copy =43007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 1

vflag_file = 44 vflag_func = 1 vflag_copy =44001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 2

vflag_file = 44 vflag_func = 2 vflag_copy =44002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 3

vflag_file = 44 vflag_func = 3 vflag_copy =44003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 4

vflag_file = 44 vflag_func = 4 vflag_copy =44004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 5

vflag_file = 44 vflag_func = 5 vflag_copy =44005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 6

vflag_file = 44 vflag_func = 6 vflag_copy =44006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 7

vflag_file = 44 vflag_func = 7 vflag_copy =44007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 8

vflag_file = 44 vflag_func = 8 vflag_copy =44008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 9

vflag_file = 44 vflag_func = 9 vflag_copy =44009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 10

vflag_file = 44 vflag_func = 10 vflag_copy =44010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 11

vflag_file = 44 vflag_func = 11 vflag_copy =44011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 12

vflag_file = 44 vflag_func = 12 vflag_copy =44012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 44 13

vflag_file = 44 vflag_func = 13 vflag_copy =44013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 45 1

vflag_file = 45 vflag_func = 1 vflag_copy =45001  
0 Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 45 2

vflag_file = 45 vflag_func = 2 vflag_copy =45002  
-nan Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 45 3

ASAN:SIGSEGV 
================================================================= 
==17472==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fb453bd4aea bp 0x7ffcb2ef5e90 sp 0x7ffcb2ef5628 T0) 
    #0 0x7fb453bd4ae9 in strlen 6 
    #1 0x49307f in __interceptor_strcpy 2 
    #2 0x50382c in uninit_memory_access_003 3 
    #3 0x50382c in uninit_memory_access_main 3 
    #4 0x4cf608 in main 3 
    #5 0x7fb453b6dec4 in __libc_start_main 7 
    #6 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 6 in strlen 
==17472==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 45 4

vflag_file = 45 vflag_func = 4 vflag_copy =45004  
0  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 45 5

vflag_file = 45 vflag_func = 5 vflag_copy =45005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 45 6

 
================================================================= 
==17478==ERROR: LeakSanitizer: detected memory leaks 
 
Direct leak of 25 byte(s) in 1 object(s) allocated from: 
    #0 0x4a6bb4 in calloc 3 
    #1 0x50392b in uninit_memory_access_006 7 
    #2 0x50392b in uninit_memory_access_main 8 
    #3 0x4cf608 in main 3 
 
SUMMARY: AddressSanitizer: 25 byte(s) leaked in 1 allocation(s). 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 45 7

vflag_file = 45 vflag_func = 7 vflag_copy =45007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 45 8

vflag_file = 45 vflag_func = 8 vflag_copy =45008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 45 9

vflag_file = 45 vflag_func = 9 vflag_copy =45009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 45 10

vflag_file = 45 vflag_func = 10 vflag_copy =45010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 45 11

ASAN:SIGSEGV 
================================================================= 
==17489==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000031 (pc 0x0000004b7310 bp 0x7ffcc414c0d0 sp 0x7ffcc414b818 T0) 
    #0 0x4b730f in __sanitizer::internal_strlen(char const*) 0 
    #1 0x430920 in printf_common(void*, char const*, __va_list_tag*) 8 
    #2 0x43100c in vsnprintf 1 
    #3 0x4329f1 in snprintf 1 
    #4 0x503f8d in uninit_memory_access_011_func_001 3 
    #5 0x503f8d in uninit_memory_access_011 8 
    #6 0x503f8d in uninit_memory_access_main 3 
    #7 0x4cf608 in main 3 
    #8 0x7feb65be8ec4 in __libc_start_main 7 
    #9 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 0 in __sanitizer::internal_strlen(char const*) 
==17489==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 45 12

vflag_file = 45 vflag_func = 12 vflag_copy =45012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 45 13

vflag_file = 45 vflag_func = 13 vflag_copy =45013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 45 14

ASAN:SIGSEGV 
================================================================= 
==17495==ERROR: AddressSanitizer: SEGV on unknown address 0xffffffffffffffef (pc 0x00000041837f bp 0xffffffffffffffef sp 0x7ffed91380b0 T0) 
    #0 0x41837e in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 5 
    #1 0x41837e in AtomicallySetQuarantineFlag 4 
    #2 0x41837e in Deallocate 5 
    #3 0x41837e in __asan::asan_free(void*, __sanitizer::BufferedStackTrace*, __asan::AllocType) 9 
    #4 0x4a6809 in __interceptor_free 3 
    #5 0x504065 in uninit_memory_access_main 3 
    #6 0x4cf608 in main 3 
    #7 0x7fabe96c5ec4 in __libc_start_main 7 
    #8 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 5 in atomic_compare_exchange_strong<__sanitizer::atomic_uint8_t> 
==17495==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 45 15

vflag_file = 45 vflag_func = 15 vflag_copy =45015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 1

vflag_file = 46 vflag_func = 1 vflag_copy =46001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 2

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 46 3

vflag_file = 46 vflag_func = 3 vflag_copy =46003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 4

vflag_file = 46 vflag_func = 4 vflag_copy =46004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 5

vflag_file = 46 vflag_func = 5 vflag_copy =46005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 6

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 46 7

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 46 8

vflag_file = 46 vflag_func = 8 vflag_copy =46008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 9

vflag_file = 46 vflag_func = 9 vflag_copy =46009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 10

vflag_file = 46 vflag_func = 10 vflag_copy =46010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 11

vflag_file = 46 vflag_func = 11 vflag_copy =46011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 12

vflag_file = 46 vflag_func = 12 vflag_copy =46012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 13

vflag_file = 46 vflag_func = 13 vflag_copy =46013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 14

vflag_file = 46 vflag_func = 14 vflag_copy =46014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 46 15

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 46 16

================================================================= 
==17529==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000eefa at pc 0x00000049326b bp 0x7ffcc9204e80 sp 0x7ffcc9204640 
READ of size 11 at 0x60200000eefa thread T0 
    #0 0x49326a in __interceptor_strcpy 5 
    #1 0x5050ac in uninit_pointer_016 9 
    #2 0x4cf653 in main 3 
    #3 0x7f29922a7ec4 in __libc_start_main 7 
    #4 0x417cd5 in _start ) 
 
0x60200000eefa is located 0 bytes to the right of 10-byte region [0x60200000eef0,0x60200000eefa) 
allocated by thread T0 here: 
    #0 0x4a6a2b in malloc 3 
    #1 0x504ea4 in uninit_pointer_016_func_002 1 
 
SUMMARY: AddressSanitizer: heap-buffer-overflow 5 in __interceptor_strcpy 
Shadow bytes around the buggy address: 
  0x0c047fff9d80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9d90: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
=>0x0c047fff9dd0: fa fa fa fa fa fa 00 02 fa fa 00 02 fa fa 00[02] 
  0x0c047fff9de0: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fd 
  0x0c047fff9df0: fa fa fd fd fa fa fd fd fa fa fd fd fa fa 00 02 
  0x0c047fff9e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
  0x0c047fff9e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==17529==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 47 1

vflag_file = 47 vflag_func = 1 vflag_copy =47001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 2

vflag_file = 47 vflag_func = 2 vflag_copy =47002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 3

vflag_file = 47 vflag_func = 3 vflag_copy =47003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 4

vflag_file = 47 vflag_func = 4 vflag_copy =47004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 5

vflag_file = 47 vflag_func = 5 vflag_copy =47005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 6

vflag_file = 47 vflag_func = 6 vflag_copy =47006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 7

vflag_file = 47 vflag_func = 7 vflag_copy =47007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 8

vflag_file = 47 vflag_func = 8 vflag_copy =47008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 9

vflag_file = 47 vflag_func = 9 vflag_copy =47009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 10

vflag_file = 47 vflag_func = 10 vflag_copy =47010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 11

vflag_file = 47 vflag_func = 11 vflag_copy =47011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 12

vflag_file = 47 vflag_func = 12 vflag_copy =47012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 13

vflag_file = 47 vflag_func = 13 vflag_copy =47013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 14

vflag_file = 47 vflag_func = 14 vflag_copy =47014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 47 15

vflag_file = 47 vflag_func = 15 vflag_copy =47015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 48 1

vflag_file = 48 vflag_func = 1 vflag_copy =48001  
Task1! Unlock without Lock, threadID# 140040528197376! thread no = THREAD1  
Task1! Unlock without Lock, threadID# 140040519804672! thread no = THREAD2  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 48 2

vflag_file = 48 vflag_func = 2 vflag_copy =48002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 48 3

vflag_file = 48 vflag_func = 3 vflag_copy =48003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 48 4

vflag_file = 48 vflag_func = 4 vflag_copy =48004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 48 5

vflag_file = 48 vflag_func = 5 vflag_copy =48005  
Task5! Unlock without Lock, threadID# 140529748670208! gbl5 = 5  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 48 6

vflag_file = 48 vflag_func = 6 vflag_copy =48006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 48 7

vflag_file = 48 vflag_func = 7 vflag_copy =48007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 48 8

vflag_file = 48 vflag_func = 8 vflag_copy =48008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 49 1

vflag_file = 49 vflag_func = 1 vflag_copy =49001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 49 2

vflag_file = 49 vflag_func = 2 vflag_copy =49002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 49 3

vflag_file = 49 vflag_func = 3 vflag_copy =49003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 49 4

vflag_file = 49 vflag_func = 4 vflag_copy =49004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 49 5

vflag_file = 49 vflag_func = 5 vflag_copy =49005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 49 6

vflag_file = 49 vflag_func = 6 vflag_copy =49006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 49 7

vflag_file = 49 vflag_func = 7 vflag_copy =49007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 1

vflag_file = 50 vflag_func = 1 vflag_copy =50001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 2

vflag_file = 50 vflag_func = 2 vflag_copy =50002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 3

ASAN:SIGSEGV 
================================================================= 
==17610==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000001 (pc 0x00000050c6b2 bp 0x7ffd667f7320 sp 0x7ffd667f7210 T0) 
    #0 0x50c6b1 in wrong_arguments_func_pointer_003_func_001 0 
    #1 0x50dcf1 in wrong_arguments_func_pointer_003 8 
    #2 0x50dcf1 in wrong_arguments_func_pointer_main 1 
    #3 0x4cf77f in main 3 
    #4 0x7f7edc775ec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 0 in wrong_arguments_func_pointer_003_func_001 
==17610==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 50 4

vflag_file = 50 vflag_func = 4 vflag_copy =50004  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 5

vflag_file = 50 vflag_func = 5 vflag_copy =50005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 6

vflag_file = 50 vflag_func = 6 vflag_copy =50006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 7

vflag_file = 50 vflag_func = 7 vflag_copy =50007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 8

vflag_file = 50 vflag_func = 8 vflag_copy =50008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 9

ASAN:SIGSEGV 
================================================================= 
==17622==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000053 (pc 0x7f0729f3daea bp 0x7ffd89c8dc90 sp 0x7ffd89c8d408 T0) 
    #0 0x7f0729f3dae9 in strlen 6 
    #1 0x491a16 in __interceptor_strcat 4 
    #2 0x50c8ee in wrong_arguments_func_pointer_009_func_001 5 
    #3 0x50df09 in wrong_arguments_func_pointer_009 8 
    #4 0x50df09 in wrong_arguments_func_pointer_main 1 
    #5 0x4cf77f in main 3 
    #6 0x7f0729ed6ec4 in __libc_start_main 7 
    #7 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 6 in strlen 
==17622==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 50 10

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 50 11

vflag_file = 50 vflag_func = 11 vflag_copy =50011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 12

================================================================= 
==17628==ERROR: AddressSanitizer: global-buffer-overflow on address 0x00000052830e at pc 0x00000048fedc bp 0x7ffee626e510 sp 0x7ffee626dcd0 
WRITE of size 52 at 0x00000052830e thread T0 
    #0 0x48fedb in __asan_memset 3 
    #1 0x50dfed in wrong_arguments_func_pointer_012_func_001 5 
    #2 0x50dfed in wrong_arguments_func_pointer_012 3 
    #3 0x50dfed in wrong_arguments_func_pointer_main 6 
    #4 0x4cf77f in main 3 
    #5 0x7f71e4474ec4 in __libc_start_main 7 
    #6 0x417cd5 in _start ) 
 
0x00000052830e is located 50 bytes to the left of global variable '<string literal>' defined in 'wrong_arguments_func_pointer.c:376:14' (0x528340) of size 17 
  '<string literal>' is ascii string 'This is a string' 
0x00000052830e is located 0 bytes to the right of global variable '<string literal>' defined in 'wrong_arguments_func_pointer.c:294:10' (0x528300) of size 14 
  '<string literal>' is ascii string 'STRING BUFFER' 
SUMMARY: AddressSanitizer: global-buffer-overflow 3 in __asan_memset 
Shadow bytes around the buggy address: 
  0x00008009d010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x00008009d020: 00 00 00 00 00 00 00 00 00 00 00 00 05 f9 f9 f9 
  0x00008009d030: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00 
  0x00008009d040: 00 00 00 00 00 00 00 00 00 00 04 f9 f9 f9 f9 f9 
  0x00008009d050: 00 02 f9 f9 f9 f9 f9 f9 07 f9 f9 f9 f9 f9 f9 f9 
=>0x00008009d060: 00[06]f9 f9 f9 f9 f9 f9 00 00 01 f9 f9 f9 f9 f9 
  0x00008009d070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x00008009d080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x00008009d090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x00008009d0a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  0x00008009d0b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
Shadow byte legend (one shadow byte represents 8 application bytes): 
  Addressable:           00 
  Partially addressable: 01 02 03 04 05 06 07  
  Heap left redzone:       fa 
  Heap right redzone:      fb 
  Freed heap region:       fd 
  Stack left redzone:      f1 
  Stack mid redzone:       f2 
  Stack right redzone:     f3 
  Stack partial redzone:   f4 
  Stack after return:      f5 
  Stack use after scope:   f8 
  Global redzone:          f9 
  Global init order:       f6 
  Poisoned by user:        f7 
  Container overflow:      fc 
  Array cookie:            ac 
  Intra object redzone:    bb 
  ASan internal:           fe 
  Left alloca redzone:     ca 
  Right alloca redzone:    cb 
==17628==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 50 13

ASAN:SIGSEGV 
================================================================= 
==17630==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x00000050cf0e bp 0x7ffe9f366610 sp 0x7ffe9f366510 T0) 
    #0 0x50cf0d in wrong_arguments_func_pointer_013_func_001 3 
    #1 0x50e05b in wrong_arguments_func_pointer_013 2 
    #2 0x50e05b in wrong_arguments_func_pointer_main 1 
    #3 0x4cf77f in main 3 
    #4 0x7f972bce5ec4 in __libc_start_main 7 
    #5 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 3 in wrong_arguments_func_pointer_013_func_001 
==17630==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 50 14

vflag_file = 50 vflag_func = 14 vflag_copy =50014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 15

ASAN:SIGSEGV 
================================================================= 
==17634==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7efdda454aea bp 0x7ffcdc613900 sp 0x7ffcdc613098 T0) 
    #0 0x7efdda454ae9 in strlen 6 
    #1 0x49307f in __interceptor_strcpy 2 
    #2 0x50d346 in wrong_arguments_func_pointer_015_func_002 5 
    #3 0x50d346 in wrong_arguments_func_pointer_015 6 
    #4 0x50e0f6 in wrong_arguments_func_pointer_main 3 
    #5 0x4cf77f in main 3 
    #6 0x7efdda3edec4 in __libc_start_main 7 
    #7 0x417cd5 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 6 in strlen 
==17634==ABORTING 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 50 16

vflag_file = 50 vflag_func = 16 vflag_copy =50016  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 17

vflag_file = 50 vflag_func = 17 vflag_copy =50017  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 50 18

 
================================================================= 
==17640==ERROR: LeakSanitizer: detected memory leaks 
 
Direct leak of 52 byte(s) in 1 object(s) allocated from: 
    #0 0x4a6a2b in malloc 3 
    #1 0x50e1ec in wrong_arguments_func_pointer_018 0 
    #2 0x50e1ec in wrong_arguments_func_pointer_main 6 
    #3 0x4cf77f in main 3 
 
SUMMARY: AddressSanitizer: 52 byte(s) leaked in 1 allocation(s). 
 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 51 1

vflag_file = 51 vflag_func = 1 vflag_copy =51001  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 2

vflag_file = 51 vflag_func = 2 vflag_copy =51002  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 3

vflag_file = 51 vflag_func = 3 vflag_copy =51003  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 4

 

Confirmed as True Positive 

ASan being tested on 01.w_Defects 51 5

vflag_file = 51 vflag_func = 5 vflag_copy =51005  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 6

vflag_file = 51 vflag_func = 6 vflag_copy =51006  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 7

vflag_file = 51 vflag_func = 7 vflag_copy =51007  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 8

vflag_file = 51 vflag_func = 8 vflag_copy =51008  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 9

vflag_file = 51 vflag_func = 9 vflag_copy =51009  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 10

vflag_file = 51 vflag_func = 10 vflag_copy =51010  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 11

vflag_file = 51 vflag_func = 11 vflag_copy =51011  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 12

vflag_file = 51 vflag_func = 12 vflag_copy =51012  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 13

vflag_file = 51 vflag_func = 13 vflag_copy =51013  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 14

vflag_file = 51 vflag_func = 14 vflag_copy =51014  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 15

vflag_file = 51 vflag_func = 15 vflag_copy =51015  
Printed from main function  

Confirmed Negative 

ASan being tested on 01.w_Defects 51 16

vflag_file = 51 vflag_func = 16 vflag_copy =51016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 1

vflag_file = 1 vflag_func = 1 vflag_copy =1001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 2

vflag_file = 1 vflag_func = 2 vflag_copy =1002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 3

vflag_file = 1 vflag_func = 3 vflag_copy =1003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 4

vflag_file = 1 vflag_func = 4 vflag_copy =1004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 5

vflag_file = 1 vflag_func = 5 vflag_copy =1005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 6

vflag_file = 1 vflag_func = 6 vflag_copy =1006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 7

vflag_file = 1 vflag_func = 7 vflag_copy =1007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 8

vflag_file = 1 vflag_func = 8 vflag_copy =1008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 9

vflag_file = 1 vflag_func = 9 vflag_copy =1009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 10

vflag_file = 1 vflag_func = 10 vflag_copy =1010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 11

vflag_file = 1 vflag_func = 11 vflag_copy =1011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 12

vflag_file = 1 vflag_func = 12 vflag_copy =1012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 13

vflag_file = 1 vflag_func = 13 vflag_copy =1013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 14

vflag_file = 1 vflag_func = 14 vflag_copy =1014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 15

vflag_file = 1 vflag_func = 15 vflag_copy =1015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 16

vflag_file = 1 vflag_func = 16 vflag_copy =1016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 1 17

vflag_file = 1 vflag_func = 17 vflag_copy =1017  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 1

vflag_file = 2 vflag_func = 1 vflag_copy =2001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 2

vflag_file = 2 vflag_func = 2 vflag_copy =2002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 3

vflag_file = 2 vflag_func = 3 vflag_copy =2003  
1Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 4

vflag_file = 2 vflag_func = 4 vflag_copy =2004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 5

vflag_file = 2 vflag_func = 5 vflag_copy =2005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 6

vflag_file = 2 vflag_func = 6 vflag_copy =2006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 7

vflag_file = 2 vflag_func = 7 vflag_copy =2007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 8

vflag_file = 2 vflag_func = 8 vflag_copy =2008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 9

vflag_file = 2 vflag_func = 9 vflag_copy =2009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 10

vflag_file = 2 vflag_func = 10 vflag_copy =2010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 11

vflag_file = 2 vflag_func = 11 vflag_copy =2011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 12

vflag_file = 2 vflag_func = 12 vflag_copy =2012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 13

vflag_file = 2 vflag_func = 13 vflag_copy =2013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 14

vflag_file = 2 vflag_func = 14 vflag_copy =2014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 15

vflag_file = 2 vflag_func = 15 vflag_copy =2015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 16

vflag_file = 2 vflag_func = 16 vflag_copy =2016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 17

vflag_file = 2 vflag_func = 17 vflag_copy =2017  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 18

vflag_file = 2 vflag_func = 18 vflag_copy =2018  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 19

vflag_file = 2 vflag_func = 19 vflag_copy =2019  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 20

vflag_file = 2 vflag_func = 20 vflag_copy =2020  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 21

vflag_file = 2 vflag_func = 21 vflag_copy =2021  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 22

vflag_file = 2 vflag_func = 22 vflag_copy =2022  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 23

vflag_file = 2 vflag_func = 23 vflag_copy =2023  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 24

vflag_file = 2 vflag_func = 24 vflag_copy =2024  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 25

vflag_file = 2 vflag_func = 25 vflag_copy =2025  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 26

vflag_file = 2 vflag_func = 26 vflag_copy =2026  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 27

vflag_file = 2 vflag_func = 27 vflag_copy =2027  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 28

vflag_file = 2 vflag_func = 28 vflag_copy =2028  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 29

vflag_file = 2 vflag_func = 29 vflag_copy =2029  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 30

vflag_file = 2 vflag_func = 30 vflag_copy =2030  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 31

vflag_file = 2 vflag_func = 31 vflag_copy =2031  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 2 32

vflag_file = 2 vflag_func = 32 vflag_copy =2032  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 1

vflag_file = 3 vflag_func = 1 vflag_copy =3001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 2

vflag_file = 3 vflag_func = 2 vflag_copy =3002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 3

vflag_file = 3 vflag_func = 3 vflag_copy =3003  
1Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 4

vflag_file = 3 vflag_func = 4 vflag_copy =3004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 5

vflag_file = 3 vflag_func = 5 vflag_copy =3005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 6

vflag_file = 3 vflag_func = 6 vflag_copy =3006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 7

vflag_file = 3 vflag_func = 7 vflag_copy =3007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 8

vflag_file = 3 vflag_func = 8 vflag_copy =3008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 9

vflag_file = 3 vflag_func = 9 vflag_copy =3009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 10

vflag_file = 3 vflag_func = 10 vflag_copy =3010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 11

vflag_file = 3 vflag_func = 11 vflag_copy =3011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 12

vflag_file = 3 vflag_func = 12 vflag_copy =3012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 13

vflag_file = 3 vflag_func = 13 vflag_copy =3013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 14

vflag_file = 3 vflag_func = 14 vflag_copy =3014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 15

vflag_file = 3 vflag_func = 15 vflag_copy =3015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 16

vflag_file = 3 vflag_func = 16 vflag_copy =3016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 17

vflag_file = 3 vflag_func = 17 vflag_copy =3017  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 18

vflag_file = 3 vflag_func = 18 vflag_copy =3018  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 19

vflag_file = 3 vflag_func = 19 vflag_copy =3019  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 20

vflag_file = 3 vflag_func = 20 vflag_copy =3020  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 21

vflag_file = 3 vflag_func = 21 vflag_copy =3021  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 22

vflag_file = 3 vflag_func = 22 vflag_copy =3022  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 23

vflag_file = 3 vflag_func = 23 vflag_copy =3023  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 24

vflag_file = 3 vflag_func = 24 vflag_copy =3024  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 25

vflag_file = 3 vflag_func = 25 vflag_copy =3025  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 26

vflag_file = 3 vflag_func = 26 vflag_copy =3026  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 27

vflag_file = 3 vflag_func = 27 vflag_copy =3027  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 28

vflag_file = 3 vflag_func = 28 vflag_copy =3028  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 29

vflag_file = 3 vflag_func = 29 vflag_copy =3029  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 30

vflag_file = 3 vflag_func = 30 vflag_copy =3030  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 31

vflag_file = 3 vflag_func = 31 vflag_copy =3031  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 32

vflag_file = 3 vflag_func = 32 vflag_copy =3032  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 33

vflag_file = 3 vflag_func = 33 vflag_copy =3033  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 34

vflag_file = 3 vflag_func = 34 vflag_copy =3034  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 35

vflag_file = 3 vflag_func = 35 vflag_copy =3035  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 36

vflag_file = 3 vflag_func = 36 vflag_copy =3036  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 37

vflag_file = 3 vflag_func = 37 vflag_copy =3037  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 3 38

vflag_file = 3 vflag_func = 38 vflag_copy =3038  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 4 1

vflag_file = 4 vflag_func = 1 vflag_copy =4001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 4 2

vflag_file = 4 vflag_func = 2 vflag_copy =4002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 5 1

vflag_file = 5 vflag_func = 1 vflag_copy =5001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 5 2

vflag_file = 5 vflag_func = 2 vflag_copy =5002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 5 3

vflag_file = 5 vflag_func = 3 vflag_copy =5003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 5 4

vflag_file = 5 vflag_func = 4 vflag_copy =5004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 5 5

vflag_file = 5 vflag_func = 5 vflag_copy =5005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 5 6

vflag_file = 5 vflag_func = 6 vflag_copy =5006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 5 7

vflag_file = 5 vflag_func = 7 vflag_copy =5007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 5 8

vflag_file = 5 vflag_func = 8 vflag_copy =5008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 5 9

vflag_file = 5 vflag_func = 9 vflag_copy =5009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 5 10

vflag_file = 5 vflag_func = 10 vflag_copy =5010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 1

vflag_file = 6 vflag_func = 1 vflag_copy =6001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 2

vflag_file = 6 vflag_func = 2 vflag_copy =6002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 3

vflag_file = 6 vflag_func = 3 vflag_copy =6003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 4

vflag_file = 6 vflag_func = 4 vflag_copy =6004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 5

vflag_file = 6 vflag_func = 5 vflag_copy =6005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 6

vflag_file = 6 vflag_func = 6 vflag_copy =6006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 7

vflag_file = 6 vflag_func = 7 vflag_copy =6007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 8

vflag_file = 6 vflag_func = 8 vflag_copy =6008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 9

vflag_file = 6 vflag_func = 9 vflag_copy =6009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 10

vflag_file = 6 vflag_func = 10 vflag_copy =6010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 11

vflag_file = 6 vflag_func = 11 vflag_copy =6011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 12

vflag_file = 6 vflag_func = 12 vflag_copy =6012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 13

vflag_file = 6 vflag_func = 13 vflag_copy =6013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 14

vflag_file = 6 vflag_func = 14 vflag_copy =6014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 15

vflag_file = 6 vflag_func = 15 vflag_copy =6015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 16

vflag_file = 6 vflag_func = 16 vflag_copy =6016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 17

vflag_file = 6 vflag_func = 17 vflag_copy =6017  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 18

vflag_file = 6 vflag_func = 18 vflag_copy =6018  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 6 19

vflag_file = 6 vflag_func = 19 vflag_copy =6019  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 1

vflag_file = 7 vflag_func = 1 vflag_copy =7001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 2

vflag_file = 7 vflag_func = 2 vflag_copy =7002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 3

vflag_file = 7 vflag_func = 3 vflag_copy =7003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 4

vflag_file = 7 vflag_func = 4 vflag_copy =7004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 5

vflag_file = 7 vflag_func = 5 vflag_copy =7005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 6

vflag_file = 7 vflag_func = 6 vflag_copy =7006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 7

vflag_file = 7 vflag_func = 7 vflag_copy =7007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 8

vflag_file = 7 vflag_func = 8 vflag_copy =7008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 9

vflag_file = 7 vflag_func = 9 vflag_copy =7009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 10

vflag_file = 7 vflag_func = 10 vflag_copy =7010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 11

vflag_file = 7 vflag_func = 11 vflag_copy =7011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 12

vflag_file = 7 vflag_func = 12 vflag_copy =7012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 13

vflag_file = 7 vflag_func = 13 vflag_copy =7013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 14

vflag_file = 7 vflag_func = 14 vflag_copy =7014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 15

vflag_file = 7 vflag_func = 15 vflag_copy =7015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 16

vflag_file = 7 vflag_func = 16 vflag_copy =7016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 17

vflag_file = 7 vflag_func = 17 vflag_copy =7017  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 18

vflag_file = 7 vflag_func = 18 vflag_copy =7018  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 19

vflag_file = 7 vflag_func = 19 vflag_copy =7019  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 20

vflag_file = 7 vflag_func = 20 vflag_copy =7020  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 21

vflag_file = 7 vflag_func = 21 vflag_copy =7021  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 22

vflag_file = 7 vflag_func = 22 vflag_copy =7022  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 23

vflag_file = 7 vflag_func = 23 vflag_copy =7023  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 24

vflag_file = 7 vflag_func = 24 vflag_copy =7024  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 7 25

vflag_file = 7 vflag_func = 25 vflag_copy =7025  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 1

vflag_file = 8 vflag_func = 1 vflag_copy =8001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 2

vflag_file = 8 vflag_func = 2 vflag_copy =8002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 3

vflag_file = 8 vflag_func = 3 vflag_copy =8003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 4

vflag_file = 8 vflag_func = 4 vflag_copy =8004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 5

vflag_file = 8 vflag_func = 5 vflag_copy =8005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 6

vflag_file = 8 vflag_func = 6 vflag_copy =8006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 7

vflag_file = 8 vflag_func = 7 vflag_copy =8007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 8

vflag_file = 8 vflag_func = 8 vflag_copy =8008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 9

vflag_file = 8 vflag_func = 9 vflag_copy =8009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 10

vflag_file = 8 vflag_func = 10 vflag_copy =8010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 11

vflag_file = 8 vflag_func = 11 vflag_copy =8011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 8 12

vflag_file = 8 vflag_func = 12 vflag_copy =8012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 1

vflag_file = 9 vflag_func = 1 vflag_copy =9001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 2

vflag_file = 9 vflag_func = 2 vflag_copy =9002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 3

vflag_file = 9 vflag_func = 3 vflag_copy =9003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 4

vflag_file = 9 vflag_func = 4 vflag_copy =9004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 5

vflag_file = 9 vflag_func = 5 vflag_copy =9005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 6

vflag_file = 9 vflag_func = 6 vflag_copy =9006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 7

vflag_file = 9 vflag_func = 7 vflag_copy =9007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 8

vflag_file = 9 vflag_func = 8 vflag_copy =9008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 9

vflag_file = 9 vflag_func = 9 vflag_copy =9009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 10

vflag_file = 9 vflag_func = 10 vflag_copy =9010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 11

vflag_file = 9 vflag_func = 11 vflag_copy =9011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 12

vflag_file = 9 vflag_func = 12 vflag_copy =9012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 9 13

vflag_file = 9 vflag_func = 13 vflag_copy =9013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 10 1

vflag_file = 10 vflag_func = 1 vflag_copy =10001  
Task1! dead_lock= 20  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 10 2

vflag_file = 10 vflag_func = 2 vflag_copy =10002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 10 3

vflag_file = 10 vflag_func = 3 vflag_copy =10003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 10 4

vflag_file = 10 vflag_func = 4 vflag_copy =10004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 10 5

vflag_file = 10 vflag_func = 5 vflag_copy =10005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 11 1

vflag_file = 11 vflag_func = 1 vflag_copy =11001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 11 2

vflag_file = 11 vflag_func = 2 vflag_copy =11002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 11 3

vflag_file = 11 vflag_func = 3 vflag_copy =11003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 1

vflag_file = 12 vflag_func = 1 vflag_copy =12001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 2

vflag_file = 12 vflag_func = 2 vflag_copy =12002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 3

vflag_file = 12 vflag_func = 3 vflag_copy =12003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 4

vflag_file = 12 vflag_func = 4 vflag_copy =12004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 5

vflag_file = 12 vflag_func = 5 vflag_copy =12005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 6

vflag_file = 12 vflag_func = 6 vflag_copy =12006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 7

vflag_file = 12 vflag_func = 7 vflag_copy =12007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 8

vflag_file = 12 vflag_func = 8 vflag_copy =12008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 9

vflag_file = 12 vflag_func = 9 vflag_copy =12009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 10

vflag_file = 12 vflag_func = 10 vflag_copy =12010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 11

vflag_file = 12 vflag_func = 11 vflag_copy =12011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 12 12

vflag_file = 12 vflag_func = 12 vflag_copy =12012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 13 1

vflag_file = 13 vflag_func = 1 vflag_copy =13001  
Task1! It's me, thread #61863680! 
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 13 2

vflag_file = 13 vflag_func = 2 vflag_copy =13002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 13 3

vflag_file = 13 vflag_func = 3 vflag_copy =13003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 13 4

vflag_file = 13 vflag_func = 4 vflag_copy =13004  
Task3! It's me, thread #100! 
Task4! It's me, thread #200! 
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 14 1

vflag_file = 14 vflag_func = 1 vflag_copy =14001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 14 2

vflag_file = 14 vflag_func = 2 vflag_copy =14002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 14 3

vflag_file = 14 vflag_func = 3 vflag_copy =14003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 14 4

vflag_file = 14 vflag_func = 4 vflag_copy =14004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 14 5

vflag_file = 14 vflag_func = 5 vflag_copy =14005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 14 6

vflag_file = 14 vflag_func = 6 vflag_copy =14006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 15 1

vflag_file = 15 vflag_func = 1 vflag_copy =15001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 15 2

vflag_file = 15 vflag_func = 2 vflag_copy =15002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 15 3

vflag_file = 15 vflag_func = 3 vflag_copy =15003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 15 4

vflag_file = 15 vflag_func = 4 vflag_copy =15004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 15 5

vflag_file = 15 vflag_func = 5 vflag_copy =15005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 15 6

vflag_file = 15 vflag_func = 6 vflag_copy =15006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 15 7

vflag_file = 15 vflag_func = 7 vflag_copy =15007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 15 8

vflag_file = 15 vflag_func = 8 vflag_copy =15008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 15 9

vflag_file = 15 vflag_func = 9 vflag_copy =15009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 1

vflag_file = 16 vflag_func = 1 vflag_copy =16001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 2

vflag_file = 16 vflag_func = 2 vflag_copy =16002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 3

vflag_file = 16 vflag_func = 3 vflag_copy =16003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 4

vflag_file = 16 vflag_func = 4 vflag_copy =16004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 5

vflag_file = 16 vflag_func = 5 vflag_copy =16005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 6

vflag_file = 16 vflag_func = 6 vflag_copy =16006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 7

vflag_file = 16 vflag_func = 7 vflag_copy =16007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 8

vflag_file = 16 vflag_func = 8 vflag_copy =16008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 9

vflag_file = 16 vflag_func = 9 vflag_copy =16009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 10

vflag_file = 16 vflag_func = 10 vflag_copy =16010  
gPrinted from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 11

vflag_file = 16 vflag_func = 11 vflag_copy =16011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 12

vflag_file = 16 vflag_func = 12 vflag_copy =16012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 13

vflag_file = 16 vflag_func = 13 vflag_copy =16013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 14

vflag_file = 16 vflag_func = 14 vflag_copy =16014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 15

vflag_file = 16 vflag_func = 15 vflag_copy =16015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 16 16

vflag_file = 16 vflag_func = 16 vflag_copy =16016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 17 1

vflag_file = 17 vflag_func = 1 vflag_copy =17001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 17 2

vflag_file = 17 vflag_func = 2 vflag_copy =17002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 17 3

vflag_file = 17 vflag_func = 3 vflag_copy =17003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 17 4

vflag_file = 17 vflag_func = 4 vflag_copy =17004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 17 5

vflag_file = 17 vflag_func = 5 vflag_copy =17005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 17 6

vflag_file = 17 vflag_func = 6 vflag_copy =17006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 17 8

vflag_file = 17 vflag_func = 8 vflag_copy =17008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 17 11

vflag_file = 17 vflag_func = 11 vflag_copy =17011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 1

vflag_file = 18 vflag_func = 1 vflag_copy =18001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 2

vflag_file = 18 vflag_func = 2 vflag_copy =18002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 3

vflag_file = 18 vflag_func = 3 vflag_copy =18003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 4

 
================================================================= 
==18166==ERROR: LeakSanitizer: detected memory leaks 
 
Direct leak of 17 byte(s) in 1 object(s) allocated from: 
    #0 0x4a697b in malloc 3 
    #1 0x4f6b6c in func_pointer_004_func_001 8 
    #2 0x4f6b6c in func_pointer_004 2 
 
SUMMARY: AddressSanitizer: 17 byte(s) leaked in 1 allocation(s). 
 

Confirmed as False Positive 

ASan being tested on 02.wo_Defects 18 5

vflag_file = 18 vflag_func = 5 vflag_copy =18005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 6

vflag_file = 18 vflag_func = 6 vflag_copy =18006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 7

vflag_file = 18 vflag_func = 7 vflag_copy =18007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 8

vflag_file = 18 vflag_func = 8 vflag_copy =18008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 9

vflag_file = 18 vflag_func = 9 vflag_copy =18009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 10

vflag_file = 18 vflag_func = 10 vflag_copy =18010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 11

 
================================================================= 
==18181==ERROR: LeakSanitizer: detected memory leaks 
 
Direct leak of 17 byte(s) in 1 object(s) allocated from: 
    #0 0x4a697b in malloc 3 
    #1 0x4fb1ce in func_pointer_011_func_001 8 
    #2 0x4fb1ce in func_pointer_011 1 
 
SUMMARY: AddressSanitizer: 17 byte(s) leaked in 1 allocation(s). 
 

Confirmed as False Positive 

ASan being tested on 02.wo_Defects 18 12

vflag_file = 18 vflag_func = 12 vflag_copy =18012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 13

vflag_file = 18 vflag_func = 13 vflag_copy =18013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 14

vflag_file = 18 vflag_func = 14 vflag_copy =18014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 18 15

vflag_file = 18 vflag_func = 15 vflag_copy =18015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 1

vflag_file = 19 vflag_func = 1 vflag_copy =19001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 2

vflag_file = 19 vflag_func = 2 vflag_copy =19002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 3

vflag_file = 19 vflag_func = 3 vflag_copy =19003  
a 
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 4

vflag_file = 19 vflag_func = 4 vflag_copy =19004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 5

vflag_file = 19 vflag_func = 5 vflag_copy =19005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 6

vflag_file = 19 vflag_func = 6 vflag_copy =19006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 7

vflag_file = 19 vflag_func = 7 vflag_copy =19007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 8

vflag_file = 19 vflag_func = 8 vflag_copy =19008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 9

vflag_file = 19 vflag_func = 9 vflag_copy =19009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 10

vflag_file = 19 vflag_func = 10 vflag_copy =19010  
TEST STRING 
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 11

vflag_file = 19 vflag_func = 11 vflag_copy =19011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 12

vflag_file = 19 vflag_func = 12 vflag_copy =19012  
APrinted from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 13

vflag_file = 19 vflag_func = 13 vflag_copy =19013  
STRING#Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 14

vflag_file = 19 vflag_func = 14 vflag_copy =19014  
APrinted from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 15

vflag_file = 19 vflag_func = 15 vflag_copy =19015  
TEST 
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 19 16

vflag_file = 19 vflag_func = 16 vflag_copy =19016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 21 1

vflag_file = 21 vflag_func = 1 vflag_copy =21001  
00 
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 21 2

vflag_file = 21 vflag_func = 2 vflag_copy =21002  
00 
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 21 3

vflag_file = 21 vflag_func = 3 vflag_copy =21003  
00102030405060708090Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 21 4

vflag_file = 21 vflag_func = 4 vflag_copy =21004  
102030405060708090100 
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 22 1

vflag_file = 22 vflag_func = 1 vflag_copy =22001  
1804289381Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 23 1

vflag_file = 23 vflag_func = 1 vflag_copy =23001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 23 2

vflag_file = 23 vflag_func = 2 vflag_copy =23002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 23 3

vflag_file = 23 vflag_func = 3 vflag_copy =23003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 23 4

vflag_file = 23 vflag_func = 4 vflag_copy =23004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 23 5

vflag_file = 23 vflag_func = 5 vflag_copy =23005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 23 6

vflag_file = 23 vflag_func = 6 vflag_copy =23006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 1

vflag_file = 24 vflag_func = 1 vflag_copy =24001  
10Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 2

vflag_file = 24 vflag_func = 2 vflag_copy =24002  
10.500000Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 3

vflag_file = 24 vflag_func = 3 vflag_copy =24003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 4

vflag_file = 24 vflag_func = 4 vflag_copy =24004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 5

vflag_file = 24 vflag_func = 5 vflag_copy =24005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 6

vflag_file = 24 vflag_func = 6 vflag_copy =24006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 7

vflag_file = 24 vflag_func = 7 vflag_copy =24007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 8

vflag_file = 24 vflag_func = 8 vflag_copy =24008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 9

vflag_file = 24 vflag_func = 9 vflag_copy =24009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 10

vflag_file = 24 vflag_func = 10 vflag_copy =24010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 11

vflag_file = 24 vflag_func = 11 vflag_copy =24011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 12

vflag_file = 24 vflag_func = 12 vflag_copy =24012  
10Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 13

vflag_file = 24 vflag_func = 13 vflag_copy =24013  
10Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 14

vflag_file = 24 vflag_func = 14 vflag_copy =24014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 15

 
================================================================= 
==18274==ERROR: LeakSanitizer: detected memory leaks 
 
Direct leak of 17 byte(s) in 1 object(s) allocated from: 
    #0 0x4a697b in malloc 3 
    #1 0x509a7c in invalid_memory_access_015_func_001 8 
    #2 0x509a7c in invalid_memory_access_015 8 
 
SUMMARY: AddressSanitizer: 17 byte(s) leaked in 1 allocation(s). 
 

Confirmed as False Positive 

ASan being tested on 02.wo_Defects 24 16

vflag_file = 24 vflag_func = 16 vflag_copy =24016  
invalid gbl= STRING00  
invalid str= STRING00  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 24 17

vflag_file = 24 vflag_func = 17 vflag_copy =24017  
invalid gbl= TEST  
invalid str= TEST  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 25 1

vflag_file = 25 vflag_func = 1 vflag_copy =25001  
16843009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 25 2

vflag_file = 25 vflag_func = 2 vflag_copy =25002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 25 3

vflag_file = 25 vflag_func = 3 vflag_copy =25003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 25 4

vflag_file = 25 vflag_func = 4 vflag_copy =25004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 25 5

vflag_file = 25 vflag_func = 5 vflag_copy =25005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 25 6

vflag_file = 25 vflag_func = 6 vflag_copy =25006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 25 7

vflag_file = 25 vflag_func = 7 vflag_copy =25007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 25 8

ASAN:SIGSEGV 
================================================================= 
==18295==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x00000050c816 bp 0x7ffeaec534e0 sp 0x7ffeaec53460 T0) 
    #0 0x50c815 in littlemem_st_008_func_002 8 
    #1 0x50c815 in littlemem_st_008 7 
    #2 0x50c815 in littlemem_st_main 7 
    #3 0x4d2b6c in main 3 
    #4 0x7f0251b23ec4 in __libc_start_main 7 
    #5 0x417c25 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 8 in littlemem_st_008_func_002 
==18295==ABORTING 
 

Confirmed as False Positive 

ASan being tested on 02.wo_Defects 25 9

ASAN:SIGSEGV 
================================================================= 
==18297==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x00000050c8b9 bp 0x7fff88056e80 sp 0x7fff88056e00 T0) 
    #0 0x50c8b8 in littlemem_st_009_func_002 8 
    #1 0x50c8b8 in littlemem_st_009 1 
    #2 0x50c8b8 in littlemem_st_main 2 
    #3 0x4d2b6c in main 3 
    #4 0x7f01e26cfec4 in __libc_start_main 7 
    #5 0x417c25 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 8 in littlemem_st_009_func_002 
==18297==ABORTING 
 

Confirmed as False Positive 

ASan being tested on 02.wo_Defects 25 10

ASAN:SIGSEGV 
================================================================= 
==18299==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x00000050c95c bp 0x7ffde13b41e0 sp 0x7ffde13b4160 T0) 
    #0 0x50c95b in littlemem_st_010_func_002 7 
    #1 0x50c95b in littlemem_st_010 3 
    #2 0x50c95b in littlemem_st_main 7 
    #3 0x4d2b6c in main 3 
    #4 0x7f8c520ceec4 in __libc_start_main 7 
    #5 0x417c25 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 7 in littlemem_st_010_func_002 
==18299==ABORTING 
 

Confirmed as False Positive 

ASan being tested on 02.wo_Defects 25 11

ASAN:SIGSEGV 
================================================================= 
==18301==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x00000050c9ff bp 0x7ffdb79c2e40 sp 0x7ffdb79c2dc0 T0) 
    #0 0x50c9fe in littlemem_st_011_func_002 7 
    #1 0x50c9fe in littlemem_st_011 1 
    #2 0x50c9fe in littlemem_st_main 2 
    #3 0x4d2b6c in main 3 
    #4 0x7f631c7f1ec4 in __libc_start_main 7 
    #5 0x417c25 in _start ) 
 
AddressSanitizer can not provide additional info. 
SUMMARY: AddressSanitizer: SEGV 7 in littlemem_st_011_func_002 
==18301==ABORTING 
 

Confirmed as False Positive 

ASan being tested on 02.wo_Defects 27 1

vflag_file = 27 vflag_func = 1 vflag_copy =27001  
Task1! Lock Never Unlock, threadID# 139882374625024! gbl1 = 1  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 27 2

vflag_file = 27 vflag_func = 2 vflag_copy =27002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 27 3

vflag_file = 27 vflag_func = 3 vflag_copy =27003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 27 4

vflag_file = 27 vflag_func = 4 vflag_copy =27004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 27 5

vflag_file = 27 vflag_func = 5 vflag_copy =27005  
Task5! Lock Never Unlock, threadID# 140314381645568! gbl5 = 5  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 27 6

vflag_file = 27 vflag_func = 6 vflag_copy =27006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 27 7

vflag_file = 27 vflag_func = 7 vflag_copy =27007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 27 8

vflag_file = 27 vflag_func = 8 vflag_copy =27008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 27 9

vflag_file = 27 vflag_func = 9 vflag_copy =27009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 1

vflag_file = 28 vflag_func = 1 vflag_copy =28001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 2

vflag_file = 28 vflag_func = 2 vflag_copy =28002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 3

vflag_file = 28 vflag_func = 3 vflag_copy =28003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 4

vflag_file = 28 vflag_func = 4 vflag_copy =28004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 5

vflag_file = 28 vflag_func = 5 vflag_copy =28005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 6

vflag_file = 28 vflag_func = 6 vflag_copy =28006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 7

 
================================================================= 
==18349==ERROR: LeakSanitizer: detected memory leaks 
 
Direct leak of 17 byte(s) in 1 object(s) allocated from: 
    #0 0x4a697b in malloc 3 
    #1 0x4d6a55 in memory_allocation_failure_007_func_001 8 
    #2 0x4d6a55 in memory_allocation_failure_007 0 
 
SUMMARY: AddressSanitizer: 17 byte(s) leaked in 1 allocation(s). 
 

Confirmed as False Positive 

ASan being tested on 02.wo_Defects 28 8

 
================================================================= 
==18352==ERROR: LeakSanitizer: detected memory leaks 
 
Direct leak of 20 byte(s) in 1 object(s) allocated from: 
    #0 0x4a697b in malloc 3 
    #1 0x4d7c92 in memory_allocation_failure_008_func_001 2 
    #2 0x4d7c92 in memory_allocation_failure_008 7 
    #3 0x4d7c92 in memory_allocation_failure_main 7 
 
SUMMARY: AddressSanitizer: 20 byte(s) leaked in 1 allocation(s). 
 

Confirmed as False Positive 

ASan being tested on 02.wo_Defects 28 9

vflag_file = 28 vflag_func = 9 vflag_copy =28009  
String Test123Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 10

vflag_file = 28 vflag_func = 10 vflag_copy =28010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 11

vflag_file = 28 vflag_func = 11 vflag_copy =28011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 12

vflag_file = 28 vflag_func = 12 vflag_copy =28012  
0Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 13

vflag_file = 28 vflag_func = 13 vflag_copy =28013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 14

vflag_file = 28 vflag_func = 14 vflag_copy =28014  
0 10.500000Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 15

vflag_file = 28 vflag_func = 15 vflag_copy =28015  
1Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 28 16

vflag_file = 28 vflag_func = 16 vflag_copy =28016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 1

vflag_file = 29 vflag_func = 1 vflag_copy =29001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 2

vflag_file = 29 vflag_func = 2 vflag_copy =29002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 3

vflag_file = 29 vflag_func = 3 vflag_copy =29003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 4

vflag_file = 29 vflag_func = 4 vflag_copy =29004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 5

vflag_file = 29 vflag_func = 5 vflag_copy =29005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 6

vflag_file = 29 vflag_func = 6 vflag_copy =29006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 7

vflag_file = 29 vflag_func = 7 vflag_copy =29007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 8

vflag_file = 29 vflag_func = 8 vflag_copy =29008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 9

vflag_file = 29 vflag_func = 9 vflag_copy =29009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 10

vflag_file = 29 vflag_func = 10 vflag_copy =29010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 11

vflag_file = 29 vflag_func = 11 vflag_copy =29011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 12

vflag_file = 29 vflag_func = 12 vflag_copy =29012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 13

vflag_file = 29 vflag_func = 13 vflag_copy =29013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 14

vflag_file = 29 vflag_func = 14 vflag_copy =29014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 15

vflag_file = 29 vflag_func = 15 vflag_copy =29015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 16

vflag_file = 29 vflag_func = 16 vflag_copy =29016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 17

vflag_file = 29 vflag_func = 17 vflag_copy =29017  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 29 18

vflag_file = 29 vflag_func = 18 vflag_copy =29018  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 30 1

vflag_file = 30 vflag_func = 1 vflag_copy =30001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 30 2

vflag_file = 30 vflag_func = 2 vflag_copy =30002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 30 3

vflag_file = 30 vflag_func = 3 vflag_copy =30003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 30 4

vflag_file = 30 vflag_func = 4 vflag_copy =30004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 1

vflag_file = 31 vflag_func = 1 vflag_copy =31001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 2

vflag_file = 31 vflag_func = 2 vflag_copy =31002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 3

vflag_file = 31 vflag_func = 3 vflag_copy =31003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 4

vflag_file = 31 vflag_func = 4 vflag_copy =31004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 5

vflag_file = 31 vflag_func = 5 vflag_copy =31005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 6

vflag_file = 31 vflag_func = 6 vflag_copy =31006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 7

vflag_file = 31 vflag_func = 7 vflag_copy =31007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 8

vflag_file = 31 vflag_func = 8 vflag_copy =31008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 9

vflag_file = 31 vflag_func = 9 vflag_copy =31009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 10

vflag_file = 31 vflag_func = 10 vflag_copy =31010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 11

vflag_file = 31 vflag_func = 11 vflag_copy =31011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 12

vflag_file = 31 vflag_func = 12 vflag_copy =31012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 13

vflag_file = 31 vflag_func = 13 vflag_copy =31013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 14

vflag_file = 31 vflag_func = 14 vflag_copy =31014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 15

vflag_file = 31 vflag_func = 15 vflag_copy =31015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 31 17

vflag_file = 31 vflag_func = 17 vflag_copy =31017  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 1

vflag_file = 32 vflag_func = 1 vflag_copy =32001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 2

vflag_file = 32 vflag_func = 2 vflag_copy =32002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 3

vflag_file = 32 vflag_func = 3 vflag_copy =32003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 4

vflag_file = 32 vflag_func = 4 vflag_copy =32004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 5

vflag_file = 32 vflag_func = 5 vflag_copy =32005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 6

vflag_file = 32 vflag_func = 6 vflag_copy =32006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 7

vflag_file = 32 vflag_func = 7 vflag_copy =32007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 8

vflag_file = 32 vflag_func = 8 vflag_copy =32008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 9

vflag_file = 32 vflag_func = 9 vflag_copy =32009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 10

vflag_file = 32 vflag_func = 10 vflag_copy =32010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 11

vflag_file = 32 vflag_func = 11 vflag_copy =32011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 12

vflag_file = 32 vflag_func = 12 vflag_copy =32012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 13

vflag_file = 32 vflag_func = 13 vflag_copy =32013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 14

vflag_file = 32 vflag_func = 14 vflag_copy =32014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 15

vflag_file = 32 vflag_func = 15 vflag_copy =32015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 16

vflag_file = 32 vflag_func = 16 vflag_copy =32016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 17

vflag_file = 32 vflag_func = 17 vflag_copy =32017  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 18

vflag_file = 32 vflag_func = 18 vflag_copy =32018  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 19

vflag_file = 32 vflag_func = 19 vflag_copy =32019  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 20

vflag_file = 32 vflag_func = 20 vflag_copy =32020  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 21

vflag_file = 32 vflag_func = 21 vflag_copy =32021  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 22

vflag_file = 32 vflag_func = 22 vflag_copy =32022  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 23

vflag_file = 32 vflag_func = 23 vflag_copy =32023  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 24

vflag_file = 32 vflag_func = 24 vflag_copy =32024  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 25

vflag_file = 32 vflag_func = 25 vflag_copy =32025  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 26

vflag_file = 32 vflag_func = 26 vflag_copy =32026  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 27

vflag_file = 32 vflag_func = 27 vflag_copy =32027  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 28

vflag_file = 32 vflag_func = 28 vflag_copy =32028  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 29

vflag_file = 32 vflag_func = 29 vflag_copy =32029  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 30

vflag_file = 32 vflag_func = 30 vflag_copy =32030  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 31

vflag_file = 32 vflag_func = 31 vflag_copy =32031  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 32

vflag_file = 32 vflag_func = 32 vflag_copy =32032  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 33

vflag_file = 32 vflag_func = 33 vflag_copy =32033  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 34

vflag_file = 32 vflag_func = 34 vflag_copy =32034  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 35

vflag_file = 32 vflag_func = 35 vflag_copy =32035  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 36

vflag_file = 32 vflag_func = 36 vflag_copy =32036  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 37

vflag_file = 32 vflag_func = 37 vflag_copy =32037  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 38

vflag_file = 32 vflag_func = 38 vflag_copy =32038  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 39

vflag_file = 32 vflag_func = 39 vflag_copy =32039  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 40

vflag_file = 32 vflag_func = 40 vflag_copy =32040  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 41

vflag_file = 32 vflag_func = 41 vflag_copy =32041  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 42

vflag_file = 32 vflag_func = 42 vflag_copy =32042  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 43

vflag_file = 32 vflag_func = 43 vflag_copy =32043  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 44

vflag_file = 32 vflag_func = 44 vflag_copy =32044  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 45

vflag_file = 32 vflag_func = 45 vflag_copy =32045  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 46

vflag_file = 32 vflag_func = 46 vflag_copy =32046  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 47

vflag_file = 32 vflag_func = 47 vflag_copy =32047  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 48

vflag_file = 32 vflag_func = 48 vflag_copy =32048  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 49

vflag_file = 32 vflag_func = 49 vflag_copy =32049  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 50

vflag_file = 32 vflag_func = 50 vflag_copy =32050  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 51

vflag_file = 32 vflag_func = 51 vflag_copy =32051  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 52

vflag_file = 32 vflag_func = 52 vflag_copy =32052  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 53

vflag_file = 32 vflag_func = 53 vflag_copy =32053  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 32 54

vflag_file = 32 vflag_func = 54 vflag_copy =32054  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 33 1

vflag_file = 33 vflag_func = 1 vflag_copy =33001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 33 2

vflag_file = 33 vflag_func = 2 vflag_copy =33002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 35 1

vflag_file = 35 vflag_func = 1 vflag_copy =35001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 35 2

vflag_file = 35 vflag_func = 2 vflag_copy =35002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 36 1

vflag_file = 36 vflag_func = 1 vflag_copy =36001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 36 2

vflag_file = 36 vflag_func = 2 vflag_copy =36002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 36 3

vflag_file = 36 vflag_func = 3 vflag_copy =36003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 36 4

vflag_file = 36 vflag_func = 4 vflag_copy =36004  
Task1! Lock Never Unlock, threadID# 139810535634688! gbl1 = 1  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 36 5

vflag_file = 36 vflag_func = 5 vflag_copy =36005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 36 6

vflag_file = 36 vflag_func = 6 vflag_copy =36006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 36 7

vflag_file = 36 vflag_func = 7 vflag_copy =36007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 36 8

vflag_file = 36 vflag_func = 8 vflag_copy =36008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 1

vflag_file = 37 vflag_func = 1 vflag_copy =37001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 2

vflag_file = 37 vflag_func = 2 vflag_copy =37002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 3

vflag_file = 37 vflag_func = 3 vflag_copy =37003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 4

vflag_file = 37 vflag_func = 4 vflag_copy =37004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 5

vflag_file = 37 vflag_func = 5 vflag_copy =37005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 6

vflag_file = 37 vflag_func = 6 vflag_copy =37006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 7

vflag_file = 37 vflag_func = 7 vflag_copy =37007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 8

vflag_file = 37 vflag_func = 8 vflag_copy =37008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 9

vflag_file = 37 vflag_func = 9 vflag_copy =37009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 10

vflag_file = 37 vflag_func = 10 vflag_copy =37010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 11

vflag_file = 37 vflag_func = 11 vflag_copy =37011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 12

vflag_file = 37 vflag_func = 12 vflag_copy =37012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 13

vflag_file = 37 vflag_func = 13 vflag_copy =37013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 37 14

vflag_file = 37 vflag_func = 14 vflag_copy =37014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 38 1

vflag_file = 38 vflag_func = 1 vflag_copy =38001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 38 2

vflag_file = 38 vflag_func = 2 vflag_copy =38002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 1

vflag_file = 39 vflag_func = 1 vflag_copy =39001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 2

vflag_file = 39 vflag_func = 2 vflag_copy =39002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 3

vflag_file = 39 vflag_func = 3 vflag_copy =39003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 4

vflag_file = 39 vflag_func = 4 vflag_copy =39004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 5

vflag_file = 39 vflag_func = 5 vflag_copy =39005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 6

vflag_file = 39 vflag_func = 6 vflag_copy =39006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 7

vflag_file = 39 vflag_func = 7 vflag_copy =39007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 8

vflag_file = 39 vflag_func = 8 vflag_copy =39008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 9

vflag_file = 39 vflag_func = 9 vflag_copy =39009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 10

vflag_file = 39 vflag_func = 10 vflag_copy =39010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 11

vflag_file = 39 vflag_func = 11 vflag_copy =39011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 12

vflag_file = 39 vflag_func = 12 vflag_copy =39012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 13

vflag_file = 39 vflag_func = 13 vflag_copy =39013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 14

vflag_file = 39 vflag_func = 14 vflag_copy =39014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 15

vflag_file = 39 vflag_func = 15 vflag_copy =39015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 16

vflag_file = 39 vflag_func = 16 vflag_copy =39016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 17

vflag_file = 39 vflag_func = 17 vflag_copy =39017  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 18

vflag_file = 39 vflag_func = 18 vflag_copy =39018  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 39 19

vflag_file = 39 vflag_func = 19 vflag_copy =39019  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 40 1

vflag_file = 40 vflag_func = 1 vflag_copy =40001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 40 2

vflag_file = 40 vflag_func = 2 vflag_copy =40002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 40 3

vflag_file = 40 vflag_func = 3 vflag_copy =40003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 41 1

vflag_file = 41 vflag_func = 1 vflag_copy =41001  
Task1! Cross thread stack access, threadID# 140676623759104! thread no = THREAD1 200 
Task1! Cross thread stack access, threadID# 140676615366400! thread no = THREAD2  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 41 2

vflag_file = 41 vflag_func = 2 vflag_copy =41002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 41 3

vflag_file = 41 vflag_func = 3 vflag_copy =41003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 41 4

vflag_file = 41 vflag_func = 4 vflag_copy =41004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 41 5

 

Confirmed Negative 

ASan being tested on 02.wo_Defects 41 6

vflag_file = 41 vflag_func = 6 vflag_copy =41006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 42 1

vflag_file = 42 vflag_func = 1 vflag_copy =42001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 42 2

vflag_file = 42 vflag_func = 2 vflag_copy =42002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 42 3

vflag_file = 42 vflag_func = 3 vflag_copy =42003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 42 4

vflag_file = 42 vflag_func = 4 vflag_copy =42004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 42 5

vflag_file = 42 vflag_func = 5 vflag_copy =42005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 42 6

vflag_file = 42 vflag_func = 6 vflag_copy =42006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 42 7

vflag_file = 42 vflag_func = 7 vflag_copy =42007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 43 1

vflag_file = 43 vflag_func = 1 vflag_copy =43001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 43 2

vflag_file = 43 vflag_func = 2 vflag_copy =43002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 43 3

vflag_file = 43 vflag_func = 3 vflag_copy =43003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 43 4

vflag_file = 43 vflag_func = 4 vflag_copy =43004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 43 5

vflag_file = 43 vflag_func = 5 vflag_copy =43005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 43 6

vflag_file = 43 vflag_func = 6 vflag_copy =43006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 43 7

vflag_file = 43 vflag_func = 7 vflag_copy =43007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 1

vflag_file = 44 vflag_func = 1 vflag_copy =44001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 2

vflag_file = 44 vflag_func = 2 vflag_copy =44002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 3

vflag_file = 44 vflag_func = 3 vflag_copy =44003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 4

vflag_file = 44 vflag_func = 4 vflag_copy =44004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 5

vflag_file = 44 vflag_func = 5 vflag_copy =44005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 6

vflag_file = 44 vflag_func = 6 vflag_copy =44006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 7

vflag_file = 44 vflag_func = 7 vflag_copy =44007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 8

vflag_file = 44 vflag_func = 8 vflag_copy =44008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 9

vflag_file = 44 vflag_func = 9 vflag_copy =44009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 10

vflag_file = 44 vflag_func = 10 vflag_copy =44010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 11

vflag_file = 44 vflag_func = 11 vflag_copy =44011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 12

vflag_file = 44 vflag_func = 12 vflag_copy =44012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 44 13

vflag_file = 44 vflag_func = 13 vflag_copy =44013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 1

vflag_file = 45 vflag_func = 1 vflag_copy =45001  
10 Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 2

vflag_file = 45 vflag_func = 2 vflag_copy =45002  
10.000000 Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 3

vflag_file = 45 vflag_func = 3 vflag_copy =45003  
THIS IS STRING THIS IS STRING 
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 4

vflag_file = 45 vflag_func = 4 vflag_copy =45004  
20  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 5

vflag_file = 45 vflag_func = 5 vflag_copy =45005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 6

 
================================================================= 
==18769==ERROR: LeakSanitizer: detected memory leaks 
 
Direct leak of 25 byte(s) in 1 object(s) allocated from: 
    #0 0x4a6b04 in calloc 3 
    #1 0x502cde in uninit_memory_access_006 7 
    #2 0x502cde in uninit_memory_access_main 9 
    #3 0x4d3148 in main 3 
 
SUMMARY: AddressSanitizer: 25 byte(s) leaked in 1 allocation(s). 
 

Confirmed as False Positive 

ASan being tested on 02.wo_Defects 45 7

vflag_file = 45 vflag_func = 7 vflag_copy =45007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 8

vflag_file = 45 vflag_func = 8 vflag_copy =45008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 9

vflag_file = 45 vflag_func = 9 vflag_copy =45009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 10

vflag_file = 45 vflag_func = 10 vflag_copy =45010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 11

vflag_file = 45 vflag_func = 11 vflag_copy =45011  
 test Error: STRING 
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 12

vflag_file = 45 vflag_func = 12 vflag_copy =45012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 13

vflag_file = 45 vflag_func = 13 vflag_copy =45013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 14

vflag_file = 45 vflag_func = 14 vflag_copy =45014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 45 15

vflag_file = 45 vflag_func = 15 vflag_copy =45015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 1

vflag_file = 46 vflag_func = 1 vflag_copy =46001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 2

vflag_file = 46 vflag_func = 2 vflag_copy =46002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 3

vflag_file = 46 vflag_func = 3 vflag_copy =46003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 4

vflag_file = 46 vflag_func = 4 vflag_copy =46004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 5

vflag_file = 46 vflag_func = 5 vflag_copy =46005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 6

vflag_file = 46 vflag_func = 6 vflag_copy =46006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 7

vflag_file = 46 vflag_func = 7 vflag_copy =46007  
uninit a  
uninit a  
uninit a  
uninit a  
uninit a  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 8

vflag_file = 46 vflag_func = 8 vflag_copy =46008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 9

vflag_file = 46 vflag_func = 9 vflag_copy =46009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 10

vflag_file = 46 vflag_func = 10 vflag_copy =46010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 11

vflag_file = 46 vflag_func = 11 vflag_copy =46011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 12

vflag_file = 46 vflag_func = 12 vflag_copy =46012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 13

vflag_file = 46 vflag_func = 13 vflag_copy =46013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 14

vflag_file = 46 vflag_func = 14 vflag_copy =46014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 15

vflag_file = 46 vflag_func = 15 vflag_copy =46015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 46 16

vflag_file = 46 vflag_func = 16 vflag_copy =46016  
unint p STRING00  
unint p STRING00  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 1

vflag_file = 47 vflag_func = 1 vflag_copy =47001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 2

vflag_file = 47 vflag_func = 2 vflag_copy =47002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 3

vflag_file = 47 vflag_func = 3 vflag_copy =47003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 4

vflag_file = 47 vflag_func = 4 vflag_copy =47004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 5

vflag_file = 47 vflag_func = 5 vflag_copy =47005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 6

vflag_file = 47 vflag_func = 6 vflag_copy =47006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 7

vflag_file = 47 vflag_func = 7 vflag_copy =47007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 8

vflag_file = 47 vflag_func = 8 vflag_copy =47008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 9

vflag_file = 47 vflag_func = 9 vflag_copy =47009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 10

vflag_file = 47 vflag_func = 10 vflag_copy =47010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 11

vflag_file = 47 vflag_func = 11 vflag_copy =47011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 12

vflag_file = 47 vflag_func = 12 vflag_copy =47012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 13

vflag_file = 47 vflag_func = 13 vflag_copy =47013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 14

vflag_file = 47 vflag_func = 14 vflag_copy =47014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 47 15

vflag_file = 47 vflag_func = 15 vflag_copy =47015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 48 1

vflag_file = 48 vflag_func = 1 vflag_copy =48001  
Task1! Unlock without Lock, threadID# 140692220278528! thread no = THREAD1  
Task1! Unlock without Lock, threadID# 140692211885824! thread no = THREAD2  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 48 2

vflag_file = 48 vflag_func = 2 vflag_copy =48002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 48 3

vflag_file = 48 vflag_func = 3 vflag_copy =48003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 48 4

vflag_file = 48 vflag_func = 4 vflag_copy =48004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 48 5

vflag_file = 48 vflag_func = 5 vflag_copy =48005  
Task5! Unlock without Lock, threadID# 140329451779840! gbl5 = 5  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 48 6

vflag_file = 48 vflag_func = 6 vflag_copy =48006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 48 7

vflag_file = 48 vflag_func = 7 vflag_copy =48007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 48 8

vflag_file = 48 vflag_func = 8 vflag_copy =48008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 49 1

vflag_file = 49 vflag_func = 1 vflag_copy =49001  
3Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 49 2

vflag_file = 49 vflag_func = 2 vflag_copy =49002  
3Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 49 3

vflag_file = 49 vflag_func = 3 vflag_copy =49003  
3Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 49 4

vflag_file = 49 vflag_func = 4 vflag_copy =49004  
3Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 49 5

vflag_file = 49 vflag_func = 5 vflag_copy =49005  
3Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 49 6

vflag_file = 49 vflag_func = 6 vflag_copy =49006  
3Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 49 7

vflag_file = 49 vflag_func = 7 vflag_copy =49007  
3Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 1

vflag_file = 50 vflag_func = 1 vflag_copy =50001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 2

vflag_file = 50 vflag_func = 2 vflag_copy =50002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 3

vflag_file = 50 vflag_func = 3 vflag_copy =50003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 4

vflag_file = 50 vflag_func = 4 vflag_copy =50004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 5

vflag_file = 50 vflag_func = 5 vflag_copy =50005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 6

vflag_file = 50 vflag_func = 6 vflag_copy =50006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 7

vflag_file = 50 vflag_func = 7 vflag_copy =50007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 8

vflag_file = 50 vflag_func = 8 vflag_copy =50008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 9

vflag_file = 50 vflag_func = 9 vflag_copy =50009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 10

vflag_file = 50 vflag_func = 10 vflag_copy =50010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 11

vflag_file = 50 vflag_func = 11 vflag_copy =50011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 12

vflag_file = 50 vflag_func = 12 vflag_copy =50012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 13

vflag_file = 50 vflag_func = 13 vflag_copy =50013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 14

vflag_file = 50 vflag_func = 14 vflag_copy =50014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 15

vflag_file = 50 vflag_func = 15 vflag_copy =50015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 16

vflag_file = 50 vflag_func = 16 vflag_copy =50016  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 17

vflag_file = 50 vflag_func = 17 vflag_copy =50017  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 50 18

vflag_file = 50 vflag_func = 18 vflag_copy =50018  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 1

vflag_file = 51 vflag_func = 1 vflag_copy =51001  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 2

vflag_file = 51 vflag_func = 2 vflag_copy =51002  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 3

vflag_file = 51 vflag_func = 3 vflag_copy =51003  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 4

vflag_file = 51 vflag_func = 4 vflag_copy =51004  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 5

vflag_file = 51 vflag_func = 5 vflag_copy =51005  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 6

vflag_file = 51 vflag_func = 6 vflag_copy =51006  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 7

vflag_file = 51 vflag_func = 7 vflag_copy =51007  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 8

vflag_file = 51 vflag_func = 8 vflag_copy =51008  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 9

vflag_file = 51 vflag_func = 9 vflag_copy =51009  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 10

vflag_file = 51 vflag_func = 10 vflag_copy =51010  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 11

vflag_file = 51 vflag_func = 11 vflag_copy =51011  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 12

vflag_file = 51 vflag_func = 12 vflag_copy =51012  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 13

vflag_file = 51 vflag_func = 13 vflag_copy =51013  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 14

vflag_file = 51 vflag_func = 14 vflag_copy =51014  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 15

vflag_file = 51 vflag_func = 15 vflag_copy =51015  
Printed from main function  

Confirmed Negative 

ASan being tested on 02.wo_Defects 51 16

vflag_file = 51 vflag_func = 16 vflag_copy =51016  
Printed from main function  

Confirmed Negative 

